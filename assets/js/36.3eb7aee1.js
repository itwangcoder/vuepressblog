(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{468:function(e,t,a){"use strict";a.r(t);var s=a(2),n=Object(s.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"docker-与微服务实战-基础篇"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-与微服务实战-基础篇"}},[e._v("#")]),e._v(" Docker 与微服务实战 基础篇")]),e._v(" "),t("h2",{attrs:{id:"一、docker-简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、docker-简介"}},[e._v("#")]),e._v(" 一、Docker 简介")]),e._v(" "),t("h3",{attrs:{id:"_1、是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、是什么"}},[e._v("#")]),e._v(" 1、是什么")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("问题：为什么会有docker出现")]),e._v(" "),t("p",[e._v("假定您在开发一个尚硅谷的谷粒商城，您使用的是一台笔记本电脑而且您的开发环境具有特定的配置。其他开发人员身处的环境配置也各有不同。您正在开发的应用依赖于您当前的配置且还要依赖于某些配置文件。此外，您的企业还拥有标准化的测试和生产环境，且具有自身的配置和一系列支持文件。您希望尽可能多在本地模拟这些环境而不产生重新创建服务器环境的开销。请问？")]),e._v(" "),t("p",[e._v("您要如何确保应用能够在这些环境中运行和通过质量检测？并且在部署过程中不出现令人头疼的版本、配置问题，也无需重新编写代码和进行故障修复？")]),e._v(" "),t("p",[e._v("答案就是使用容器。Docker之所以发展如此迅速，也是因为它对此给出了一个标准化的解决方案-----"),t("strong",[e._v("系统平滑移植，容器虚拟化技术")]),e._v("。")]),e._v(" "),t("p",[e._v("环境配置相当麻烦，换一台机器，就要重来一次，费力费时。很多人想到，能不能从根本上解决问题，**软件可以带环境安装？**也就是说，"),t("strong",[e._v("安装的时候，把原始环境一模一样地复制过来。开发人员利用 Docker 可以消除协作编码时“在我的机器上可正常工作”的问题。")])]),e._v(" "),t("p",[t("img",{attrs:{src:"Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%B0%9A%E7%A1%85%E8%B0%B7/%E5%9F%BA%E7%A1%80%E7%AF%87/Docker%E7%AE%80%E4%BB%8B/%E6%98%AF%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98%E4%B8%BA%E4%BB%80%E4%B9%88%E6%9C%89docker%E5%87%BA%E7%8E%B0.png",alt:""}})]),e._v(" "),t("p",[e._v("之前在服务器配置一个应用的运行环境，要安装各种软件，就拿尚硅谷电商项目的环境来说，Java/RabbitMQ/MySQL/JDBC驱动包等。安装和配置这些东西有多麻烦就不说了，它还不能跨平台。假如我们是在 Windows 上安装的这些环境，到了 Linux 又得重新装。况且就算不跨操作系统，换另一台同样操作系统的服务器，要"),t("strong",[e._v("移植")]),e._v("应用也是非常麻烦的。")]),e._v(" "),t("p",[e._v("传统上认为，软件编码开发/测试结束后，所产出的成果即是程序或是能够编译执行的二进制字节码等(java为例)。而为了让这些程序可以顺利执行，开发团队也得准备完整的部署文件，让维运团队得以部署应用程式，"),t("strong",[e._v("开发需要清楚的告诉运维部署团队，用的全部配置文件+所有软件环境。不过，即便如此，仍然常常发生部署失败的状况")]),e._v("。Docker的出现"),t("strong",[e._v("使得Docker得以打破过去「程序即应用」的观念。透过镜像(images)将作业系统核心除外，运作应用程式所需要的系统环境，由下而上打包，达到应用程式跨平台间的无缝接轨运作。")])])]),e._v(" "),t("li",[t("p",[e._v("docker理念")]),e._v(" "),t("p",[t("strong",[e._v("Docker是基于Go语言实现的云开源项目。")])]),e._v(" "),t("p",[e._v("Docker的主要目标是“Build，Ship and Run Any App,Anywhere”，也就是通过对应用组件的封装、分发、部署、运行等生命周期的管理，使用户的APP（可以是一个WEB应用或数据库应用等等）及其运行环境能够做到“"),t("strong",[e._v("一次镜像，处处运行")]),e._v("”。")]),e._v(" "),t("p",[t("img",{attrs:{src:"Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%B0%9A%E7%A1%85%E8%B0%B7/%E5%9F%BA%E7%A1%80%E7%AF%87/Docker%E7%AE%80%E4%BB%8B/%E6%98%AF%E4%BB%80%E4%B9%88docker%E7%90%86%E5%BF%B5.png",alt:""}})]),e._v(" "),t("p",[t("strong",[e._v("Linux容器技术的出现就解决了这样一个问题，而 Docker 就是在它的基础上发展过来的")]),e._v("。将应用打成镜像，通过镜像成为运行在Docker容器上面的实例，而 Docker容器在任何操作系统上都是一致的，这就实现了跨平台、跨服务器。"),t("strong",[e._v("只需要一次配置好环境，换到别的机子上就可以一键部署好，大大简化了操作")]),e._v("。")])]),e._v(" "),t("li",[t("p",[e._v("总结")]),e._v(" "),t("p",[e._v("解决了"),t("strong",[e._v("运行环境和配置问题")]),e._v("的"),t("strong",[e._v("软件容器")]),e._v("，方便做持续集成并有助于整体发布的容器虚拟化技术。")])])]),e._v(" "),t("h3",{attrs:{id:"_2、容器与虚拟机比较"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、容器与虚拟机比较"}},[e._v("#")]),e._v(" 2、容器与虚拟机比较")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("容器发展简史")]),e._v(" "),t("p",[t("img",{attrs:{src:"Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%B0%9A%E7%A1%85%E8%B0%B7/%E5%9F%BA%E7%A1%80%E7%AF%87/Docker%E7%AE%80%E4%BB%8B/%E5%AE%B9%E5%99%A8%E4%B8%8E%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%AF%94%E8%BE%83%E5%AE%B9%E5%99%A8%E5%8F%91%E5%B1%95%E7%AE%80%E5%8F%B21.png",alt:""}})]),e._v(" "),t("p",[t("img",{attrs:{src:"Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%B0%9A%E7%A1%85%E8%B0%B7/%E5%9F%BA%E7%A1%80%E7%AF%87/Docker%E7%AE%80%E4%BB%8B/%E5%AE%B9%E5%99%A8%E4%B8%8E%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%AF%94%E8%BE%83%E5%AE%B9%E5%99%A8%E5%8F%91%E5%B1%95%E7%AE%80%E5%8F%B22.png",alt:""}})])]),e._v(" "),t("li",[t("p",[e._v("传统虚拟机技术")]),e._v(" "),t("p",[e._v("虚拟机（virtual machine）就是带环境安装的一种解决方案。")]),e._v(" "),t("p",[e._v("它可以在一种操作系统里面运行另一种操作系统，比如在Windows10系统里面运行Linux系统CentOS7。应用程序对此毫无感知，因为虚拟机看上去跟真实系统一模一样，而对于底层系统来说，虚拟机就是一个普通文件，不需要了就删掉，对其他部分毫无影响。这类虚拟机完美的运行了另一套系统，能够使应用程序，操作系统和硬件三者之间的逻辑不变。")]),e._v(" "),t("blockquote",[t("p",[e._v("Win10 ——> VMWare ——> Centos7 ——> 各种cpu、内存网络额配置+各种软件 ——> 虚拟机实例")])]),e._v(" "),t("p",[e._v("传统虚拟机技术基于安装在主操作系统上的虚拟机管理系统（如：VirtualBox 和 VMWare 等），创建虚拟机（虚拟出各种硬件），在虚拟机上安装从操作系统，在从操作系统中安装部署各种应用")]),e._v(" "),t("p",[t("img",{attrs:{src:"Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%B0%9A%E7%A1%85%E8%B0%B7/%E5%9F%BA%E7%A1%80%E7%AF%87/Docker%E7%AE%80%E4%BB%8B/%E5%AE%B9%E5%99%A8%E4%B8%8E%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%AF%94%E8%BE%83%E4%BC%A0%E7%BB%9F%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8A%80%E6%9C%AF.png",alt:""}})]),e._v(" "),t("p",[e._v("虚拟机的缺点：")]),e._v(" "),t("ol",[t("li",[e._v("资源占用多")]),e._v(" "),t("li",[e._v("冗余步骤多")]),e._v(" "),t("li",[e._v("启动慢")])])]),e._v(" "),t("li",[t("p",[e._v("容器虚拟化技术")]),e._v(" "),t("p",[e._v("由于前面虚拟机存在某些缺点，Linux发展出了另一种虚拟化技术：")]),e._v(" "),t("p",[t("strong",[e._v("Linux容器(Linux Containers，缩写为 LXC)")])]),e._v(" "),t("p",[e._v("Linux容器是与系统其他部分隔离开的一系列进程，从另一个镜像运行，并由该镜像提供支持进程所需的全部文件。容器提供的镜像包含了应用的所有依赖项，因而在从开发到测试再到生产的整个过程中，它都具有可移植性和一致性。")]),e._v(" "),t("p",[t("strong",[e._v("Linux 容器不是模拟一个完整的操作系统")]),e._v("而是对进程进行隔离。有了容器，就可以将软件运行所需的所有资源打包到一个隔离的容器中。"),t("strong",[e._v("容器与虚拟机不同，不需要捆绑一整套操作系统")]),e._v("，只需要软件工作所需的库资源和设置。系统因此而变得高效轻量并保证部署在任何环境中的软件都能始终如一地运行。")]),e._v(" "),t("p",[t("img",{attrs:{src:"Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%B0%9A%E7%A1%85%E8%B0%B7/%E5%9F%BA%E7%A1%80%E7%AF%87/Docker%E7%AE%80%E4%BB%8B/%E5%AE%B9%E5%99%A8%E4%B8%8E%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%AF%94%E8%BE%83%E5%AE%B9%E5%99%A8%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8A%80%E6%9C%AF.png",alt:""}})]),e._v(" "),t("p",[e._v("Docker容器是在操作系统层面上实现虚拟化，直接复用本地主机的操作系统，而传统虚拟机则是在硬件层面实现虚拟化。与传统的虚拟机相比，Docker优势体现为启动速度快、占用体积小。")])]),e._v(" "),t("li",[t("p",[e._v("对比")]),e._v(" "),t("p",[t("img",{attrs:{src:"Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%B0%9A%E7%A1%85%E8%B0%B7/%E5%9F%BA%E7%A1%80%E7%AF%87/Docker%E7%AE%80%E4%BB%8B/%E5%AE%B9%E5%99%A8%E4%B8%8E%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%AF%94%E8%BE%83%E5%AF%B9%E6%AF%94.png",alt:""}})]),e._v(" "),t("p",[e._v("比较了 Docker 和传统虚拟化方式的不同之处：")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程；")])]),e._v(" "),t("li",[t("p",[e._v("容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便。")])]),e._v(" "),t("li",[t("p",[e._v("每个容器之间互相隔离，每个容器有自己的文件系统 ，容器之间进程不会相互影响，能区分计算资源。")])])])])]),e._v(" "),t("h3",{attrs:{id:"_3、能干嘛"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、能干嘛"}},[e._v("#")]),e._v(" 3、能干嘛")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("技术职级变化")]),e._v(" "),t("p",[e._v("coder ——> programmer ——> software engineer ——> DevOps engineer")])]),e._v(" "),t("li",[t("p",[e._v("开发/运维（DevOps）新一代开发工程师")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("一次构建、随处运行")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("更快速的应用交付和部署")]),e._v(" "),t("p",[e._v("传统的应用开发完成后，需要提供一堆安装程序和配置说明文档，安装部署后需根据配置文档进行繁杂的配置才能正常运行。Docker化之后只需要交付少量容器镜像文件，在正式生产环境加载镜像并运行即可，应用安装配置在镜像里已经内置好，大大节省部署配置和测试验证时间。")])]),e._v(" "),t("li",[t("p",[e._v("更便捷的升级和扩缩容")]),e._v(" "),t("p",[e._v("随着微服务架构和Docker的发展，大量的应用会通过微服务方式架构，应用的开发构建将变成搭乐高积木一样，每个Docker容器将变成一块“积木”，应用的升级将变得非常容易。当现有的容器不足以支撑业务处理时，可通过镜像运行新的容器进行快速扩容，使应用系统的扩容从原先的天级变成分钟级甚至秒级。")])]),e._v(" "),t("li",[t("p",[e._v("更简单的系统运维")]),e._v(" "),t("p",[e._v("应用容器化运行后，生产环境运行的应用可与开发、测试环境的应用高度一致，容器会将应用程序相关的环境和状态完全封装起来，不会因为底层基础架构和操作系统的不一致性给应用带来影响，产生新的BUG。当出现程序异常时，也可以通过测试环境的相同容器进行快速定位和修复。")])]),e._v(" "),t("li",[t("p",[e._v("更高效的计算资源利用")]),e._v(" "),t("p",[e._v("Docker是"),t("strong",[e._v("内核级虚拟化")]),e._v("，其不像传统的虚拟化技术一样需要额外的Hypervisor支持，所以在一台物理机上可以运行很多个容器实例，可大大提升物理服务器的CPU和内存的利用率。")])])])]),e._v(" "),t("li",[t("p",[e._v("Docker应用场景")]),e._v(" "),t("p",[t("img",{attrs:{src:"Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%B0%9A%E7%A1%85%E8%B0%B7/%E5%9F%BA%E7%A1%80%E7%AF%87/Docker%E7%AE%80%E4%BB%8B/%E8%83%BD%E5%B9%B2%E5%98%9B%E5%BC%80%E5%8F%91%E8%BF%90%E7%BB%B4%E6%96%B0%E4%B8%80%E4%BB%A3%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88Docker%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF.png",alt:""}})])])])]),e._v(" "),t("li",[t("p",[e._v("哪些企业在使用")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("新浪")]),e._v(" "),t("p",[t("img",{attrs:{src:"Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%B0%9A%E7%A1%85%E8%B0%B7/%E5%9F%BA%E7%A1%80%E7%AF%87/Docker%E7%AE%80%E4%BB%8B/%E8%83%BD%E5%B9%B2%E5%98%9B%E5%93%AA%E4%BA%9B%E4%BC%81%E4%B8%9A%E5%9C%A8%E4%BD%BF%E7%94%A8%E6%96%B0%E6%B5%AA1.png",alt:""}})]),e._v(" "),t("p",[t("img",{attrs:{src:"Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%B0%9A%E7%A1%85%E8%B0%B7/%E5%9F%BA%E7%A1%80%E7%AF%87/Docker%E7%AE%80%E4%BB%8B/%E8%83%BD%E5%B9%B2%E5%98%9B%E5%93%AA%E4%BA%9B%E4%BC%81%E4%B8%9A%E5%9C%A8%E4%BD%BF%E7%94%A8%E6%96%B0%E6%B5%AA2.png",alt:""}})]),e._v(" "),t("p",[t("img",{attrs:{src:"Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%B0%9A%E7%A1%85%E8%B0%B7/%E5%9F%BA%E7%A1%80%E7%AF%87/Docker%E7%AE%80%E4%BB%8B/%E8%83%BD%E5%B9%B2%E5%98%9B%E5%93%AA%E4%BA%9B%E4%BC%81%E4%B8%9A%E5%9C%A8%E4%BD%BF%E7%94%A8%E6%96%B0%E6%B5%AA3.png",alt:""}})]),e._v(" "),t("p",[t("img",{attrs:{src:"Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%B0%9A%E7%A1%85%E8%B0%B7/%E5%9F%BA%E7%A1%80%E7%AF%87/Docker%E7%AE%80%E4%BB%8B/%E8%83%BD%E5%B9%B2%E5%98%9B%E5%93%AA%E4%BA%9B%E4%BC%81%E4%B8%9A%E5%9C%A8%E4%BD%BF%E7%94%A8%E6%96%B0%E6%B5%AA4.png",alt:""}})])]),e._v(" "),t("li",[t("p",[e._v("美团")]),e._v(" "),t("p",[t("img",{attrs:{src:"Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%B0%9A%E7%A1%85%E8%B0%B7/%E5%9F%BA%E7%A1%80%E7%AF%87/Docker%E7%AE%80%E4%BB%8B/%E8%83%BD%E5%B9%B2%E5%98%9B%E5%93%AA%E4%BA%9B%E4%BC%81%E4%B8%9A%E5%9C%A8%E4%BD%BF%E7%94%A8%E7%BE%8E%E5%9B%A21.png",alt:""}})]),e._v(" "),t("p",[t("img",{attrs:{src:"Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%B0%9A%E7%A1%85%E8%B0%B7/%E5%9F%BA%E7%A1%80%E7%AF%87/Docker%E7%AE%80%E4%BB%8B/%E8%83%BD%E5%B9%B2%E5%98%9B%E5%93%AA%E4%BA%9B%E4%BC%81%E4%B8%9A%E5%9C%A8%E4%BD%BF%E7%94%A8%E7%BE%8E%E5%9B%A22.png",alt:""}})])]),e._v(" "),t("li",[t("p",[e._v("蘑菇街")]),e._v(" "),t("p",[t("img",{attrs:{src:"Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%B0%9A%E7%A1%85%E8%B0%B7/%E5%9F%BA%E7%A1%80%E7%AF%87/Docker%E7%AE%80%E4%BB%8B/%E8%83%BD%E5%B9%B2%E5%98%9B%E5%93%AA%E4%BA%9B%E4%BC%81%E4%B8%9A%E5%9C%A8%E4%BD%BF%E7%94%A8%E8%98%91%E8%8F%87%E8%A1%971.png",alt:""}})]),e._v(" "),t("p",[t("img",{attrs:{src:"Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%B0%9A%E7%A1%85%E8%B0%B7/%E5%9F%BA%E7%A1%80%E7%AF%87/Docker%E7%AE%80%E4%BB%8B/%E8%83%BD%E5%B9%B2%E5%98%9B%E5%93%AA%E4%BA%9B%E4%BC%81%E4%B8%9A%E5%9C%A8%E4%BD%BF%E7%94%A8%E8%98%91%E8%8F%87%E8%A1%972.png",alt:""}})])])])])]),e._v(" "),t("h3",{attrs:{id:"_4、去哪下"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、去哪下"}},[e._v("#")]),e._v(" 4、去哪下")]),e._v(" "),t("ul",[t("li",[e._v("官网：docker官网：http://www.docker.com")]),e._v(" "),t("li",[e._v("仓库：Docker Hub官网: https://hub.docker.com/")])]),e._v(" "),t("h2",{attrs:{id:"二、docker-安装"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、docker-安装"}},[e._v("#")]),e._v(" 二、Docker 安装")]),e._v(" "),t("h3",{attrs:{id:"_1、前提说明"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、前提说明"}},[e._v("#")]),e._v(" 1、前提说明")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("CentOS Docker 安装")]),e._v(" "),t("p",[t("img",{attrs:{src:"Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%B0%9A%E7%A1%85%E8%B0%B7/%E5%9F%BA%E7%A1%80%E7%AF%87/Docker%E5%AE%89%E8%A3%85/%E5%89%8D%E6%8F%90%E8%AF%B4%E6%98%8ECentOSDocker%E5%AE%89%E8%A3%85.png",alt:""}})])]),e._v(" "),t("li",[t("p",[e._v("前提条件")]),e._v(" "),t("p",[e._v("目前，CentOS 仅发行版本中的内核支持 Docker。Docker 运行在CentOS 7 (64-bit)上，")]),e._v(" "),t("p",[e._v("要求系统为64位、Linux系统内核版本为 3.8以上，这里选用Centos7.x")])]),e._v(" "),t("li",[t("p",[e._v("查看自己的内核")]),e._v(" "),t("p",[e._v("uname命令用于打印当前系统相关信息（内核版本号、硬件架构、主机名称和操作系统类型等）。")]),e._v(" "),t("p",[t("img",{attrs:{src:"Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%B0%9A%E7%A1%85%E8%B0%B7/%E5%9F%BA%E7%A1%80%E7%AF%87/Docker%E5%AE%89%E8%A3%85/%E5%89%8D%E6%8F%90%E8%AF%B4%E6%98%8E%E6%9F%A5%E7%9C%8B%E8%87%AA%E5%B7%B1%E7%9A%84%E5%86%85%E6%A0%B8%E6%95%99%E7%A8%8B%E5%86%85%E5%AE%B9.png",alt:""}})]),e._v(" "),t("p",[t("img",{attrs:{src:"Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%B0%9A%E7%A1%85%E8%B0%B7/%E5%9F%BA%E7%A1%80%E7%AF%87/Docker%E5%AE%89%E8%A3%85/%E5%89%8D%E6%8F%90%E8%AF%B4%E6%98%8E%E6%9F%A5%E7%9C%8B%E8%87%AA%E5%B7%B1%E7%9A%84%E5%86%85%E6%A0%B8%E6%9C%AC%E4%BA%BA%E5%86%85%E5%AE%B9.png",alt:""}})])])]),e._v(" "),t("h3",{attrs:{id:"_2、docker的基本组成"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、docker的基本组成"}},[e._v("#")]),e._v(" 2、Docker的基本组成")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("镜像(image)")]),e._v(" "),t("p",[e._v("Docker 镜像（Image）就是一个"),t("strong",[e._v("只读")]),e._v("的模板。镜像可以用来创建 Docker 容器，"),t("strong",[e._v("一个镜像可以创建很多容器")]),e._v("。它也相当于是一个root文件系统。比如官方镜像 centos:7 就包含了完整的一套 centos:7 最小系统的 root 文件系统。相当于容器的“源代码”，"),t("strong",[e._v("docker镜像文件类似于Java的类模板，而docker容器实例类似于java中new出来的实例对象")]),e._v("。")]),e._v(" "),t("p",[e._v("容器与镜像的关系类似于面向对象编程中的对象与类")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("Docker")]),e._v(" "),t("th",[e._v("面向对象")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("容器")]),e._v(" "),t("td",[e._v("对象")])]),e._v(" "),t("tr",[t("td",[e._v("镜像")]),e._v(" "),t("td",[e._v("类")])])])])]),e._v(" "),t("li",[t("p",[e._v("容器(container)")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("从面向对象角度")]),e._v(" "),t("p",[e._v("Docker 利用容器（Container）独立运行的一个或一组应用，应用程序或服务运行在容器里面，容器就类似于一个虚拟化的运行环境，"),t("strong",[e._v("容器是用镜像创建的运行实例")]),e._v("。就像是Java中的类和实例对象一样，镜像是静态的定义，容器是镜像运行时的实体。容器为镜像提供了一个标准的和隔离的运行环境，它可以被启动、开始、停止、删除。每个容器都是相互隔离的、保证安全的平台")])]),e._v(" "),t("li",[t("p",[e._v("从镜像容器角度")]),e._v(" "),t("p",[t("strong",[e._v("可以把容器看做是一个简易版的 Linux 环境")]),e._v("（包括root用户权限、进程空间、用户空间和网络空间等）和运行在其中的应用程序。")])])])]),e._v(" "),t("li",[t("p",[e._v("仓库(repository)")]),e._v(" "),t("p",[e._v("仓库（Repository）是"),t("strong",[e._v("集中存放镜像")]),e._v("文件的场所。")]),e._v(" "),t("p",[e._v("类似于")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("Maven仓库，存放各种jar包的地方；")])]),e._v(" "),t("li",[t("p",[e._v("github仓库，存放各种git项目的地方；")])]),e._v(" "),t("li",[t("p",[e._v("Docker公司提供的官方registry被称为Docker Hub，存放各种镜像模板的地方。")])])]),e._v(" "),t("p",[e._v("仓库分为公开仓库（Public）和私有仓库（Private）两种形式。"),t("strong",[e._v("最大的公开仓库是 Docker Hub(https://hub.docker.com/)")]),e._v("，存放了数量庞大的镜像供用户下载。国内的公开仓库包括阿里云 、网易云等")])]),e._v(" "),t("li",[t("p",[e._v("小总结")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("需要正确的理解仓库/镜像/容器这几个概念:")]),e._v(" "),t("p",[e._v("Docker 本身是一个容器运行载体或称之为管理引擎。我们把应用程序和配置依赖打包好形成一个可交付的运行环境，这个打包好的运行环境就是image镜像文件。只有通过这个镜像文件才能生成Docker容器实例(类似Java中new出来一个对象)。")]),e._v(" "),t("p",[e._v("image文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例。")])]),e._v(" "),t("li",[t("p",[e._v("镜像文件")]),e._v(" "),t("p",[e._v("image 文件生成的容器实例，本身也是一个文件，称为镜像文件。")])]),e._v(" "),t("li",[t("p",[e._v("容器实例")]),e._v(" "),t("p",[e._v("一个容器运行一种服务，当我们需要的时候，就可以通过docker客户端创建一个对应的运行实例，也就是我们的容器")])]),e._v(" "),t("li",[t("p",[e._v("仓库")]),e._v(" "),t("p",[e._v("就是放一堆镜像的地方，我们可以把镜像发布到仓库中，需要的时候再从仓库中拉下来就可以了。")])])])]),e._v(" "),t("li",[t("p",[e._v("Docker平台架构图解(入门版)")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("架构图")]),e._v(" "),t("p",[t("img",{attrs:{src:"Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%B0%9A%E7%A1%85%E8%B0%B7/%E5%9F%BA%E7%A1%80%E7%AF%87/Docker%E5%AE%89%E8%A3%85/Docker%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%BB%84%E6%88%90Docker%E5%B9%B3%E5%8F%B0%E6%9E%B6%E6%9E%84%E5%9B%BE%E8%A7%A3%E5%85%A5%E9%97%A8%E7%89%88%E6%9E%B6%E6%9E%84%E5%9B%BE.png",alt:""}})])]),e._v(" "),t("li",[t("p",[e._v("工作原理")]),e._v(" "),t("p",[e._v("Docker是一个Client-Server结构的系统，Docker守护进程运行在主机上， 然后通过Socket连接从客户端访问，守护进程从客户端接受命令并管理运行在主机上的容器。 "),t("strong",[e._v("容器，是一个运行时环境，就是我们前面说到的集装箱。可以对比mysql演示对比讲解")])]),e._v(" "),t("p",[t("img",{attrs:{src:"Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%B0%9A%E7%A1%85%E8%B0%B7/%E5%9F%BA%E7%A1%80%E7%AF%87/Docker%E5%AE%89%E8%A3%85/Docker%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%BB%84%E6%88%90Docker%E5%B9%B3%E5%8F%B0%E6%9E%B6%E6%9E%84%E5%9B%BE%E8%A7%A3%E5%85%A5%E9%97%A8%E7%89%88%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.png",alt:""}})])])])])]),e._v(" "),t("h3",{attrs:{id:"_3、docker平台架构图解-架构版"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、docker平台架构图解-架构版"}},[e._v("#")]),e._v(" 3、Docker平台架构图解(架构版)")]),e._v(" "),t("p",[e._v("整体架构及底层通信原理简述")]),e._v(" "),t("p",[e._v("Docker 是一个 C/S 模式的架构，后端是一个松耦合架构，众多模块各司其职。")]),e._v(" "),t("p",[t("img",{attrs:{src:"Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%B0%9A%E7%A1%85%E8%B0%B7/%E5%9F%BA%E7%A1%80%E7%AF%87/Docker%E5%AE%89%E8%A3%85/Docker%E5%B9%B3%E5%8F%B0%E6%9E%B6%E6%9E%84%E5%9B%BE%E8%A7%A3%E6%9E%B6%E6%9E%84%E7%89%88%E8%BF%90%E8%A1%8C%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B.png",alt:""}})]),e._v(" "),t("p",[t("img",{attrs:{src:"Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%B0%9A%E7%A1%85%E8%B0%B7/%E5%9F%BA%E7%A1%80%E7%AF%87/Docker%E5%AE%89%E8%A3%85/Docker%E5%B9%B3%E5%8F%B0%E6%9E%B6%E6%9E%84%E5%9B%BE%E8%A7%A3%E6%9E%B6%E6%9E%84%E7%89%88%E8%BF%90%E8%A1%8C%E5%9B%BE%E8%A7%A3.png",alt:""}})]),e._v(" "),t("h3",{attrs:{id:"_4、安装步骤"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、安装步骤"}},[e._v("#")]),e._v(" 4、安装步骤")]),e._v(" "),t("p",[e._v("官网安装教程：https://docs.docker.com/engine/install/centos/")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("确定你是CentOS7及以上版本")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("cat")]),e._v(" /etc/redhat-release\n\n")])])])]),e._v(" "),t("li",[t("p",[e._v("卸载旧版本")]),e._v(" "),t("p",[e._v("官网地址：https://docs.docker.com/engine/install/centos/")]),e._v(" "),t("p",[t("img",{attrs:{src:"Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%B0%9A%E7%A1%85%E8%B0%B7/%E5%9F%BA%E7%A1%80%E7%AF%87/Docker%E5%AE%89%E8%A3%85/%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4%E5%8D%B8%E8%BD%BD%E6%97%A7%E7%89%88%E6%9C%AC.png",alt:""}})])]),e._v(" "),t("li",[t("p",[e._v("yum安装gcc相关")]),e._v(" "),t("p",[e._v("首先应确保CentOS7能上外网，接着执行以下代码")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[e._v("yum "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-y")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" gcc\nyum "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-y")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" gcc-c++\n\n")])])])]),e._v(" "),t("li",[t("p",[e._v("安装需要的软件包")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("官网要求")]),e._v(" "),t("p",[t("img",{attrs:{src:"Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%B0%9A%E7%A1%85%E8%B0%B7/%E5%9F%BA%E7%A1%80%E7%AF%87/Docker%E5%AE%89%E8%A3%85/%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4%E5%AE%89%E8%A3%85%E9%9C%80%E8%A6%81%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%8C%85%E5%AE%98%E7%BD%91%E9%9C%80%E6%B1%82.png",alt:""}})])]),e._v(" "),t("li",[t("p",[e._v("执行命令")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[e._v("yum "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-y")]),e._v(" yum-utils\n\n")])])])])])]),e._v(" "),t("li",[t("p",[e._v("设置stable镜像仓库")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("大坑")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[e._v("yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n")])])]),t("p",[e._v("报错：")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("[Errno 14] curl#35 - TCP connection reset by peer")])]),e._v(" "),t("li",[t("p",[e._v("[Errno 12] curl#35 - Timeout")])])]),e._v(" "),t("blockquote",[t("p",[e._v("此代码是官网推荐安装步骤，用户执行此代码后，会链接国外的网址进行下载，因此会出现网络卡顿等现象，"),t("strong",[e._v("不建议使用该网址，建议使用国内镜像地址")])])])]),e._v(" "),t("li",[t("p",[e._v("推荐")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[e._v("yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n")])])]),t("blockquote",[t("p",[e._v("出现错误：")]),e._v(" "),t("p",[e._v("[root@wang128 ~]# yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n已加载插件：fastestmirror, langpacks\nadding repo from: https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\ngrabbing file https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo to /etc/yum.repos.d/docker-ce.repo\nCould not fetch/save url https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo to file /etc/yum.repos.d/docker-ce.repo: [Errno 14] HTTPS Error 403 - Forbidden")]),e._v(" "),t("p",[t("img",{attrs:{src:"Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%B0%9A%E7%A1%85%E8%B0%B7/%E5%9F%BA%E7%A1%80%E7%AF%87/Docker%E5%AE%89%E8%A3%85/%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4%E8%AE%BE%E7%BD%AEstable%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93%E6%8E%A8%E8%8D%90%E5%87%BA%E7%8E%B0%E9%94%99%E8%AF%AF.png",alt:""}})]),e._v(" "),t("p",[e._v("原因：")]),e._v(" "),t("ul",[t("li",[e._v("访问该网址次数过多把你屏蔽了")])]),e._v(" "),t("p",[e._v("解决方案：")]),e._v(" "),t("ul",[t("li",[e._v("更换网络")])])])])])]),e._v(" "),t("li",[t("p",[e._v("更新yum软件包索引")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[e._v("yum makecache fast\n\n")])])])]),e._v(" "),t("li",[t("p",[e._v("安装DOCKER CE")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[e._v("yum "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-y")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n")])])]),t("p",[e._v("安装结果：")]),e._v(" "),t("p",[t("img",{attrs:{src:"Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%B0%9A%E7%A1%85%E8%B0%B7/%E5%9F%BA%E7%A1%80%E7%AF%87/Docker%E5%AE%89%E8%A3%85/%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4%E5%AE%89%E8%A3%85DOCKERCE%E5%AE%89%E8%A3%85%E7%BB%93%E6%9E%9C.png",alt:""}})])]),e._v(" "),t("li",[t("p",[e._v("启动docker")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[e._v("systemctl start "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v("\n\n")])])])]),e._v(" "),t("li",[t("p",[e._v("测试")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" version  "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 查看 docker版本")]),e._v("\n")])])]),t("p",[t("img",{attrs:{src:"Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%B0%9A%E7%A1%85%E8%B0%B7/%E5%9F%BA%E7%A1%80%E7%AF%87/Docker%E5%AE%89%E8%A3%85/%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4%E6%B5%8B%E8%AF%95%E6%9F%A5%E7%9C%8Bdocker%E7%89%88%E6%9C%AC.png",alt:""}})]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" run hello-world\t\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 从远程镜像仓库中拉取 hello-world 项目并运行")]),e._v("\n")])])]),t("p",[t("img",{attrs:{src:"Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%B0%9A%E7%A1%85%E8%B0%B7/%E5%9F%BA%E7%A1%80%E7%AF%87/Docker%E5%AE%89%E8%A3%85/%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4%E6%B5%8B%E8%AF%95%E8%BF%9C%E7%A8%8B%E6%8B%89%E5%8F%96helloworld%E5%B9%B6%E8%BF%90%E8%A1%8C.png",alt:""}})])]),e._v(" "),t("li",[t("p",[e._v("卸载")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[e._v("systemctl stop "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v("\t\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 停止 docker 服务")]),e._v("\nyum remove docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin docker-ce-rootless-extras\t\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 卸载 docker")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("rm")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-rf")]),e._v(" /var/lib/docker\t\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 删除相关配置文件，镜像文件，容器和卷等信息")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("rm")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-rf")]),e._v(" /var/lib/containerd\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 删除相关配置文件，镜像文件，容器和卷等信息")]),e._v("\n")])])]),t("blockquote",[t("p",[e._v("运行 "),t("code",[e._v("systemctl stop docker")]),e._v(" 时出现如下提示：")]),e._v(" "),t("p",[e._v("Warning: Stopping docker.service, but it can still be activated by:\ndocker.socket")]),e._v(" "),t("p",[e._v("原因：")]),e._v(" "),t("ul",[t("li",[e._v("这是docker在关闭状态下被访问自动唤醒机制，很人性化，即这时再执行任意docker命令会直接启动")])]),e._v(" "),t("p",[e._v("解决方案：")]),e._v(" "),t("ul",[t("li",[e._v("如果真的不希望docker被访问自动唤醒，执行 "),t("code",[e._v("systemctl stop docker")]),e._v(" 后再执行"),t("code",[e._v("systemctl stop docker.socket")]),e._v("即可")])])])])]),e._v(" "),t("h3",{attrs:{id:"_5、阿里云镜像加速"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5、阿里云镜像加速"}},[e._v("#")]),e._v(" 5、阿里云镜像加速")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("是什么")]),e._v(" "),t("p",[e._v("地址：https://promotion.aliyun.com/ntms/act/kubernetes.html")])]),e._v(" "),t("li",[t("p",[e._v("注册一个属于自己的阿里云账户(可复用淘宝账号)")])]),e._v(" "),t("li",[t("p",[e._v("获得加速器地址连接")]),e._v(" "),t("ol",[t("li",[e._v("登陆阿里云开发者平台")]),e._v(" "),t("li",[e._v("点击控制台")]),e._v(" "),t("li",[e._v("选择容器镜像服务")]),e._v(" "),t("li",[e._v("获取加速器地址")])])]),e._v(" "),t("li",[t("p",[e._v("粘贴脚本直接执行")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-p")]),e._v(" /etc/docker\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("tee")]),e._v(" /etc/docker/daemon.json "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<<-")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('\'EOF\'\n{\n  "registry-mirrors": ["https://i4mas7hh.mirror.aliyuncs.com"]\n}\nEOF')]),e._v("\n\n")])])])]),e._v(" "),t("li",[t("p",[e._v("重启服务器")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" systemctl daemon-reload\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" systemctl restart "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v("\n\n")])])])])]),e._v(" "),t("h3",{attrs:{id:"_6、永远的helloworld"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6、永远的helloworld"}},[e._v("#")]),e._v(" 6、永远的HelloWorld")]),e._v(" "),t("p",[e._v("启动Docker后台容器(测试运行 hello-world)")]),e._v(" "),t("p",[t("img",{attrs:{src:"Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%B0%9A%E7%A1%85%E8%B0%B7/%E5%9F%BA%E7%A1%80%E7%AF%87/Docker%E5%AE%89%E8%A3%85/%E6%B0%B8%E8%BF%9C%E7%9A%84HelloWorld.png",alt:""}})]),e._v(" "),t("blockquote",[t("p",[e._v("输出这段提示以后，hello world就会停止运行，容器自动终止。")])]),e._v(" "),t("p",[e._v("run 干了什么")]),e._v(" "),t("p",[t("img",{attrs:{src:"Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%B0%9A%E7%A1%85%E8%B0%B7/%E5%9F%BA%E7%A1%80%E7%AF%87/Docker%E5%AE%89%E8%A3%85/%E6%B0%B8%E8%BF%9C%E7%9A%84HelloWorld%E4%B8%ADrun%E5%B9%B2%E4%BA%86%E4%BB%80%E4%B9%88.png",alt:""}})]),e._v(" "),t("h3",{attrs:{id:"_7、底层原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7、底层原理"}},[e._v("#")]),e._v(" 7、底层原理")]),e._v(" "),t("blockquote",[t("p",[e._v("为什么Docker会比VM虚拟机快")])]),e._v(" "),t("ol",[t("li",[t("p",[e._v("docker有着比虚拟机更少的抽象层")]),e._v(" "),t("p",[e._v("由于docker不需要Hypervisor(虚拟机)实现硬件资源虚拟化,运行在docker容器上的程序直接使用的都是实际物理机的硬件资源。因此在CPU、内存利用率上docker将会在效率上有明显优势。")])]),e._v(" "),t("li",[t("p",[e._v("docker利用的是宿主机的内核,而不需要加载操作系统OS内核")]),e._v(" "),t("p",[e._v("当新建一个容器时,docker不需要和虚拟机一样重新加载一个操作系统内核。进而避免引寻、加载操作系统内核返回等比较费时费资源的过程,当新建一个虚拟机时,虚拟机软件需要加载OS,返回新建过程是分钟级别的。而docker由于直接利用宿主机的操作系统,则省略了返回过程,因此新建一个docker容器只需要几秒钟。")]),e._v(" "),t("p",[t("img",{attrs:{src:"Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%B0%9A%E7%A1%85%E8%B0%B7/%E5%9F%BA%E7%A1%80%E7%AF%87/Docker%E5%AE%89%E8%A3%85/%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%8EDocker%E6%9E%B6%E6%9E%84%E5%AF%B9%E6%AF%94%E5%9B%BE.png",alt:""}})]),e._v(" "),t("p",[t("img",{attrs:{src:"Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%B0%9A%E7%A1%85%E8%B0%B7/%E5%9F%BA%E7%A1%80%E7%AF%87/Docker%E5%AE%89%E8%A3%85/%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%8EDocker%E6%9E%B6%E6%9E%84%E5%AF%B9%E6%AF%94%E8%A1%A8.png",alt:""}})])])]),e._v(" "),t("h2",{attrs:{id:"三、docker-常用命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三、docker-常用命令"}},[e._v("#")]),e._v(" 三、Docker 常用命令")]),e._v(" "),t("h3",{attrs:{id:"_1、帮助启动类命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、帮助启动类命令"}},[e._v("#")]),e._v(" 1、帮助启动类命令")]),e._v(" "),t("ul",[t("li",[e._v("启动docker： systemctl start docker")]),e._v(" "),t("li",[e._v("停止docker： systemctl stop docker")]),e._v(" "),t("li",[e._v("重启docker： systemctl restart docker")]),e._v(" "),t("li",[e._v("查看docker状态： systemctl status docker")]),e._v(" "),t("li",[e._v("开机启动： systemctl enable docker")]),e._v(" "),t("li",[e._v("查看docker概要信息： docker info")]),e._v(" "),t("li",[e._v("查看docker总体帮助文档： docker --help")]),e._v(" "),t("li",[e._v("查看docker命令帮助文档： docker 具体命令 --help")])]),e._v(" "),t("h3",{attrs:{id:"_2、镜像命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、镜像命令"}},[e._v("#")]),e._v(" 2、镜像命令")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("docker images")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("列出本地主机上的镜像")]),e._v(" "),t("p",[t("img",{attrs:{src:"Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%B0%9A%E7%A1%85%E8%B0%B7/%E5%9F%BA%E7%A1%80%E7%AF%87/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/%E9%95%9C%E5%83%8F%E5%91%BD%E4%BB%A4dockerimages%E5%88%97%E5%87%BA%E6%9C%AC%E5%9C%B0%E4%B8%BB%E6%9C%BA%E4%B8%8A%E7%9A%84%E9%95%9C%E5%83%8F.png",alt:""}})]),e._v(" "),t("p",[e._v("各个选项说明：")]),e._v(" "),t("ul",[t("li",[e._v("REPOSITORY：表示镜像的仓库源")]),e._v(" "),t("li",[e._v("TAG：镜像的标签版本号")]),e._v(" "),t("li",[e._v("IMAGE ID：镜像ID")]),e._v(" "),t("li",[e._v("CREATED：镜像创建时间")]),e._v(" "),t("li",[e._v("SIZE：镜像大小")])]),e._v(" "),t("p",[e._v("同一仓库源可以有多个 TAG版本，代表这个仓库源的不同个版本，我们使用 REPOSITORY:TAG 来定义不同的镜像。")]),e._v(" "),t("p",[e._v("如果你不指定一个镜像的版本标签，例如你只使用 ubuntu，docker 将默认使用 ubuntu:latest 镜像")])]),e._v(" "),t("li",[t("p",[e._v("OPTIONS说明：")]),e._v(" "),t("ul",[t("li",[e._v("-a :列出本地所有的镜像（含历史映像层）")]),e._v(" "),t("li",[e._v("-q :只显示镜像ID。")])])])])]),e._v(" "),t("li",[t("p",[e._v("docker search 某个XXX镜像名字")]),e._v(" "),t("p",[e._v("网站：https://hub.docker.com")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("命令")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" search "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("OPTIONS"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" 镜像名字\n")])])]),t("table",[t("thead",[t("tr",[t("th",[e._v("参数")]),e._v(" "),t("th",[e._v("说明")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("NAME")]),e._v(" "),t("td",[e._v("镜像名称")])]),e._v(" "),t("tr",[t("td",[e._v("DESCRIPTION")]),e._v(" "),t("td",[e._v("镜像说明")])]),e._v(" "),t("tr",[t("td",[e._v("STARS")]),e._v(" "),t("td",[e._v("点赞数量")])]),e._v(" "),t("tr",[t("td",[e._v("OFFICIAL")]),e._v(" "),t("td",[e._v("是否是官方的")])]),e._v(" "),t("tr",[t("td",[e._v("AUTOMATED")]),e._v(" "),t("td",[e._v("是否是自动构建的")])])])]),e._v(" "),t("p",[t("img",{attrs:{src:"Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%B0%9A%E7%A1%85%E8%B0%B7/%E5%9F%BA%E7%A1%80%E7%AF%87/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/%E9%95%9C%E5%83%8F%E5%91%BD%E4%BB%A4dockersearch%E5%91%BD%E4%BB%A4.png",alt:""}})])]),e._v(" "),t("li",[t("p",[e._v("OPTIONS说明：")]),e._v(" "),t("p",[e._v("--limit : 只列出N个镜像，默认25个")]),e._v(" "),t("blockquote",[t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("docker search --limit 5 redis\n")])])])])])])]),e._v(" "),t("li",[t("p",[e._v("docker pull 某个XXX镜像名字")]),e._v(" "),t("p",[e._v("下载镜像")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("docker pull 镜像名字[:TAG]\n")])])]),t("blockquote",[t("p",[e._v("docker pull 镜像名字")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("没有TAG就是最新版")])]),e._v(" "),t("li",[t("p",[e._v("等价于 docker pull 镜像名字:latest")])]),e._v(" "),t("li",[t("p",[e._v("docker pull ubuntu")]),e._v(" "),t("p",[t("img",{attrs:{src:"Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%B0%9A%E7%A1%85%E8%B0%B7/%E5%9F%BA%E7%A1%80%E7%AF%87/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/%E9%95%9C%E5%83%8F%E5%91%BD%E4%BB%A4dockerpull%E4%B8%ADdockerpullubuntu.png",alt:""}})])])])])]),e._v(" "),t("li",[t("p",[e._v("docker system df 查看镜像/容器/数据卷所占的空间")]),e._v(" "),t("p",[t("img",{attrs:{src:"Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%B0%9A%E7%A1%85%E8%B0%B7/%E5%9F%BA%E7%A1%80%E7%AF%87/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/%E9%95%9C%E5%83%8F%E5%91%BD%E4%BB%A4dockersystemdf%E6%9F%A5%E7%9C%8B%E9%95%9C%E5%83%8F%E5%AE%B9%E5%99%A8%E6%95%B0%E6%8D%AE%E5%8D%B7%E6%89%80%E5%8D%A0%E7%9A%84%E7%A9%BA%E9%97%B4.png",alt:""}})])]),e._v(" "),t("li",[t("p",[e._v("docker rmi 某个XXX镜像名字ID")]),e._v(" "),t("p",[e._v("删除镜像")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("删除单个")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("docker rmi  -f 镜像ID\n")])])]),t("blockquote",[t("p",[e._v("-f 表示强制删除")])])]),e._v(" "),t("li",[t("p",[e._v("删除多个")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("docker rmi -f 镜像名1:TAG 镜像名2:TAG \n\n")])])])]),e._v(" "),t("li",[t("p",[e._v("删除全部")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("docker rmi -f $(docker images -qa)\n\n")])])])])])]),e._v(" "),t("li",[t("p",[e._v("面试题：谈谈docker虚悬镜像是什么？")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("是什么")]),e._v(" "),t("p",[e._v("仓库名、标签都是<none>的镜像，俗称虚悬镜像dangling image")]),e._v(" "),t("p",[t("img",{attrs:{src:"Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%B0%9A%E7%A1%85%E8%B0%B7/%E5%9F%BA%E7%A1%80%E7%AF%87/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/%E9%95%9C%E5%83%8F%E5%91%BD%E4%BB%A4%E9%9D%A2%E8%AF%95%E9%A2%98%E8%99%9A%E6%82%AC%E9%95%9C%E5%83%8F.png",alt:""}})])]),e._v(" "),t("li",[t("p",[e._v("后续Dockerfile章节再介绍")])])])]),e._v(" "),t("li",[t("p",[e._v("思考")]),e._v(" "),t("p",[e._v("结合我们Git的学习心得，大家猜猜是否会有docker commit /docker push？？")])])]),e._v(" "),t("h3",{attrs:{id:"_3、容器命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、容器命令"}},[e._v("#")]),e._v(" 3、容器命令")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("前提")]),e._v(" "),t("p",[e._v("有镜像才能创建容器，这是根本前提(下载一个CentOS或者ubuntu镜像演示)")]),e._v(" "),t("p",[t("img",{attrs:{src:"Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%B0%9A%E7%A1%85%E8%B0%B7/%E5%9F%BA%E7%A1%80%E7%AF%87/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/%E5%AE%B9%E5%99%A8%E5%91%BD%E4%BB%A4%E5%89%8D%E6%8F%90%E8%AF%B4%E6%98%8E.png",alt:""}})]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("docker pull centos\ndocker pull ubuntu\n")])])]),t("blockquote",[t("p",[e._v("本次演示用ubuntu演示")])])]),e._v(" "),t("li",[t("p",[e._v("新建+启动容器")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("docker run [OPTIONS] IMAGE [COMMAND] [ARG...]\n")])])]),t("ul",[t("li",[e._v("OPTIONS说明")])]),e._v(" "),t("p",[e._v("OPTIONS说明（常用）：有些是一个减号，有些是两个减号")]),e._v(" "),t("ul",[t("li",[e._v('--name="容器新名字"    为容器指定一个名称；')]),e._v(" "),t("li",[e._v("-d: 后台运行容器并返回容器ID，也即启动守护式容器(后台运行)；")]),e._v(" "),t("li",[e._v("-i：以交互模式运行容器，通常与 -t 同时使用；")]),e._v(" "),t("li",[e._v("-t：为容器重新分配一个伪输入终端，通常与 -i 同时使用；也即启动交互式容器(前台有伪终端，等待交互)；")]),e._v(" "),t("li",[e._v("-P: 随机端口映射，大写P")]),e._v(" "),t("li",[e._v("-p: 指定端口映射，小写p")])]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("参数")]),e._v(" "),t("th",[e._v("说明")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("-p hostPort:containerPort")]),e._v(" "),t("td",[e._v("端口映射 -p 8080:80")])]),e._v(" "),t("tr",[t("td",[e._v("-p ip:hostPort:containerPort")]),e._v(" "),t("td",[e._v("配置监听地址 -p 10.0.0.100:8080:80")])]),e._v(" "),t("tr",[t("td",[e._v("-p ip::containerPort")]),e._v(" "),t("td",[e._v("随机分配端口 -p 10.0.0.100::80")])]),e._v(" "),t("tr",[t("td",[e._v("-p hostPort:containerPort:udp")]),e._v(" "),t("td",[e._v("指定协议 -p 8080:80:tcp")])]),e._v(" "),t("tr",[t("td",[e._v("-p 81:80 -p 443:443")]),e._v(" "),t("td",[e._v("指定多个")])])])]),e._v(" "),t("ul",[t("li",[t("p",[e._v("启动交互式容器(前台命令行)")]),e._v(" "),t("p",[t("img",{attrs:{src:"Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%B0%9A%E7%A1%85%E8%B0%B7/%E5%9F%BA%E7%A1%80%E7%AF%87/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/%E5%AE%B9%E5%99%A8%E5%91%BD%E4%BB%A4%E6%96%B0%E5%BB%BA%E5%90%AF%E5%8A%A8%E5%AE%B9%E5%99%A8%E5%90%AF%E5%8A%A8%E4%BA%A4%E4%BA%92%E5%BC%8F%E5%AE%B9%E5%99%A8%E5%89%8D%E5%8F%B0%E5%91%BD%E4%BB%A4%E8%A1%8C.png",alt:""}})]),e._v(" "),t("p",[e._v("使用镜像 ubuntu:latest 以"),t("strong",[e._v("交互模式")]),e._v("启动一个容器,在容器内执行 /bin/bash 命令。")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" run "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-it")]),e._v(" ubuntu /bin/bash\n")])])]),t("blockquote",[t("p",[e._v("参数说明：")]),e._v(" "),t("ul",[t("li",[e._v("-i：交互式操作。 （interactive）")]),e._v(" "),t("li",[e._v("-t：终端。 （tyy）")]),e._v(" "),t("li",[e._v("ubuntu：ubuntu 镜像。")]),e._v(" "),t("li",[e._v("/bin/bash：放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 /bin/bash。")])]),e._v(" "),t("p",[e._v("要退出终端，直接输入 exit:")])])])])]),e._v(" "),t("li",[t("p",[e._v("列出当前所有正在运行的容器")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("ps")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("OPTIONS"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n")])])]),t("blockquote",[t("p",[e._v("OPTIONS说明（常用）：")]),e._v(" "),t("ul",[t("li",[e._v("-a：列出当前所有正在运行的容器+历史上运行过的")]),e._v(" "),t("li",[e._v("-l：显示最近创建的容器。")]),e._v(" "),t("li",[e._v("-n：显示最近n个创建的容器。")]),e._v(" "),t("li",[e._v("-q：静默模式，只显示容器编号。")])])])]),e._v(" "),t("li",[t("p",[e._v("退出容器")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("exit")]),e._v(" "),t("p",[e._v("run进去容器，exit退出，容器停止")])]),e._v(" "),t("li",[t("p",[e._v("ctrl+p+q")]),e._v(" "),t("p",[e._v("run进去容器，ctrl+p+q退出，容器不停止")])])])]),e._v(" "),t("li",[t("p",[e._v("启动已停止运行的容器")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" start 容器ID或者容器名\n\n")])])])]),e._v(" "),t("li",[t("p",[e._v("重启容器")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" restart 容器ID或者容器名\n\n")])])])]),e._v(" "),t("li",[t("p",[e._v("停止容器")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" stop 容器ID或者容器名\n\n")])])])]),e._v(" "),t("li",[t("p",[e._v("强制停止容器")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("kill")]),e._v(" 容器ID或容器名\n\n")])])])]),e._v(" "),t("li",[t("p",[e._v("删除已停止的容器")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("rm")]),e._v(" 容器ID\n")])])]),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 一次性删除多个容器实例")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("rm")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-f")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("ps")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-a")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-q")]),t("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("ps")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-a")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-q")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("xargs")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("rm")]),e._v("\n\n")])])])]),e._v(" "),t("li",[t("p",[e._v("重要")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("有镜像才能创建容器，这是根本前提(下载一个Redis6.0.8镜像演示)")])]),e._v(" "),t("li",[t("p",[e._v("启动守护式容器(后台服务器)")]),e._v(" "),t("p",[e._v("在大部分的场景下，我们希望 docker 的服务是在后台运行的，我们可以过 -d 指定容器的后台运行模式。")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("docker run -d 容器名")]),e._v(" "),t("p",[e._v("使用镜像 ubuntu:latest 以后台模式启动一个容器")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" run "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-d")]),e._v(" ubuntu\n")])])]),t("p",[e._v("问题：然后docker ps -a 进行查看, "),t("strong",[e._v("会发现容器已经退出")]),e._v("。很重要的要说明的一点："),t("strong",[e._v("Docker容器后台运行，就必须有一个前台进程")]),e._v("。容器运行的命令如果不是那些"),t("strong",[e._v("一直挂起的命令")]),e._v("（比如运行top，tail），就是会自动退出的。")]),e._v(" "),t("p",[e._v("这个是docker的机制问题,比如你的web容器,我们以nginx为例，正常情况下,我们配置启动服务只需要启动响应的service即可。例如service nginx start。但是,这样做,nginx为后台进程模式运行,就导致docker前台没有运行的应用,这样的容器后台启动后,会立即自杀因为他觉得他没事可做了.")]),e._v(" "),t("p",[e._v("所以，最佳的解决方案是,"),t("strong",[e._v("将你要运行的程序以前台进程的形式运行，常见就是命令行模式，表示我还有交互操作，别中断，O(∩_∩)O哈哈~")])])]),e._v(" "),t("li",[t("p",[e._v("redis 前后台启动演示case")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("前台交互式启动")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" run "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-it")]),e._v(" redis:6.0.8\n\n")])])])]),e._v(" "),t("li",[t("p",[e._v("后台守护式启动")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" run "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-d")]),e._v(" redis:6.0.8\n\n")])])])])])])])]),e._v(" "),t("li",[t("p",[e._v("查看容器日志")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" logs 容器ID\n\n")])])])]),e._v(" "),t("li",[t("p",[e._v("查看容器内运行的进程")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("top")]),e._v(" 容器ID\n\n")])])])]),e._v(" "),t("li",[t("p",[e._v("查看容器内部细节")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" inspect 容器ID\n\n")])])])]),e._v(" "),t("li",[t("p",[e._v("进入正在运行的容器并以命令行交互")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("docker exec -it 容器ID bashShell")]),e._v(" "),t("p",[t("img",{attrs:{src:"Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%B0%9A%E7%A1%85%E8%B0%B7/%E5%9F%BA%E7%A1%80%E7%AF%87/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/%E5%AE%B9%E5%99%A8%E5%91%BD%E4%BB%A4%E9%87%8D%E8%A6%81%E8%BF%9B%E5%85%A5%E6%AD%A3%E5%9C%A8%E8%BF%90%E8%A1%8C%E7%9A%84%E5%AE%B9%E5%99%A8%E5%B9%B6%E4%BB%A5%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%BA%A4%E4%BA%92dockerexec.png",alt:""}})])]),e._v(" "),t("li",[t("p",[e._v("重新进入docker attach 容器ID")])]),e._v(" "),t("li",[t("p",[e._v("案例演示，用centos或者unbuntu都可以")])]),e._v(" "),t("li",[t("p",[e._v("上述两个区别")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("attach 直接进入容器启动命令的终端，不会启动新的进程，用exit退出，会导致容器的停止。")]),e._v(" "),t("p",[t("img",{attrs:{src:"Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%B0%9A%E7%A1%85%E8%B0%B7/%E5%9F%BA%E7%A1%80%E7%AF%87/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/%E5%AE%B9%E5%99%A8%E5%91%BD%E4%BB%A4%E9%87%8D%E8%A6%81%E8%BF%9B%E5%85%A5%E6%AD%A3%E5%9C%A8%E8%BF%90%E8%A1%8C%E7%9A%84%E5%AE%B9%E5%99%A8%E5%B9%B6%E4%BB%A5%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%BA%A4%E4%BA%92%E4%B8%A4%E4%B8%AA%E5%8C%BA%E5%88%ABattach.png",alt:""}})])]),e._v(" "),t("li",[t("p",[e._v("exec 是在容器中打开新的终端，并且可以启动新的进程，用exit退出，不会导致容器的停止。")]),e._v(" "),t("p",[t("img",{attrs:{src:"Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%B0%9A%E7%A1%85%E8%B0%B7/%E5%9F%BA%E7%A1%80%E7%AF%87/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/%E5%AE%B9%E5%99%A8%E5%91%BD%E4%BB%A4%E9%87%8D%E8%A6%81%E8%BF%9B%E5%85%A5%E6%AD%A3%E5%9C%A8%E8%BF%90%E8%A1%8C%E7%9A%84%E5%AE%B9%E5%99%A8%E5%B9%B6%E4%BB%A5%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%BA%A4%E4%BA%92%E4%B8%A4%E4%B8%AA%E5%8C%BA%E5%88%ABexec.png",alt:""}})])])])]),e._v(" "),t("li",[t("p",[e._v("推荐大家使用 docker exec 命令，因为退出容器终端，不会导致容器的停止。")])]),e._v(" "),t("li",[t("p",[e._v("用之前的redis容器实例进入试试")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 进入redis服务")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("exec")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-it")]),e._v(" 容器ID /bin/bash\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("exec")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-it")]),e._v(" 容器ID redis-cli\n")])])]),t("blockquote",[t("p",[e._v("一般用-d后台启动的程序，再用exec进入对应容器实例")])])])])]),e._v(" "),t("li",[t("p",[e._v("从容器内拷贝文件到主机上")]),e._v(" "),t("p",[e._v("容器→主机")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("cp")]),e._v("  容器ID:容器内路径 目的主机路径\n")])])]),t("p",[t("img",{attrs:{src:"Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%B0%9A%E7%A1%85%E8%B0%B7/%E5%9F%BA%E7%A1%80%E7%AF%87/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/%E5%AE%B9%E5%99%A8%E5%91%BD%E4%BB%A4%E9%87%8D%E8%A6%81%E4%BB%8E%E5%AE%B9%E5%99%A8%E5%86%85%E6%8B%B7%E8%B4%9D%E6%96%87%E4%BB%B6%E5%88%B0%E4%B8%BB%E6%9C%BA%E4%B8%8A.png",alt:""}})]),e._v(" "),t("blockquote",[t("p",[e._v("公式：docker cp 容器ID:容器内路径目的主机路径")])])]),e._v(" "),t("li",[t("p",[e._v("导入和导出容器")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("export 导出容器的内容留作为一个tar归档文件[对应import命令]")])]),e._v(" "),t("li",[t("p",[e._v("import 从tar包中的内容创建一个新的文件系统再导入为镜像[对应export]")])]),e._v(" "),t("li",[t("p",[e._v("案例")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" 容器ID "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" 文件名.tar\n")])])]),t("p",[t("img",{attrs:{src:"Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%B0%9A%E7%A1%85%E8%B0%B7/%E5%9F%BA%E7%A1%80%E7%AF%87/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/%E5%AE%B9%E5%99%A8%E5%91%BD%E4%BB%A4%E9%87%8D%E8%A6%81%E5%AF%BC%E5%85%A5%E5%92%8C%E5%AF%BC%E5%87%BA%E5%AE%B9%E5%99%A8%E6%A1%88%E4%BE%8B1.png",alt:""}})]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("cat")]),e._v(" 文件名.tar "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("import")]),e._v(" - 镜像用户/镜像名:镜像版本号\n")])])]),t("p",[t("img",{attrs:{src:"Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%B0%9A%E7%A1%85%E8%B0%B7/%E5%9F%BA%E7%A1%80%E7%AF%87/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/%E5%AE%B9%E5%99%A8%E5%91%BD%E4%BB%A4%E9%87%8D%E8%A6%81%E5%AF%BC%E5%85%A5%E5%92%8C%E5%AF%BC%E5%87%BA%E5%AE%B9%E5%99%A8%E6%A1%88%E4%BE%8B2.png",alt:""}})])])])])])])]),e._v(" "),t("h3",{attrs:{id:"_4、小总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、小总结"}},[e._v("#")]),e._v(" 4、小总结")]),e._v(" "),t("p",[t("img",{attrs:{src:"Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%B0%9A%E7%A1%85%E8%B0%B7/%E5%9F%BA%E7%A1%80%E7%AF%87/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/%E5%B0%8F%E6%80%BB%E7%BB%93.png",alt:""}})]),e._v(" "),t("ul",[t("li",[e._v("attach   Attach to a running container         # 当前 shell 下 attach 连接指定运行镜像")]),e._v(" "),t("li",[e._v("build   Build an image from a Dockerfile        # 通过 Dockerfile 定制镜像")]),e._v(" "),t("li",[e._v("commit   Create a new image from a container changes  # 提交当前容器为新的镜像")]),e._v(" "),t("li",[e._v("cp     Copy files/folders from the containers filesystem to the host path  #从容器中拷贝指定文件或者目录到宿主机中")]),e._v(" "),t("li",[e._v("create   Create a new container             # 创建一个新的容器，同 run，但不启动容器")]),e._v(" "),t("li",[e._v("diff    Inspect changes on a container's filesystem  # 查看 docker 容器变化")]),e._v(" "),t("li",[e._v("events   Get real time events from the server      # 从 docker 服务获取容器实时事件")]),e._v(" "),t("li",[e._v("exec    Run a command in an existing container     # 在已存在的容器上运行命令")]),e._v(" "),t("li",[e._v("export   Stream the contents of a container as a tar archive  # 导出容器的内容流作为一个 tar 归档文件[对应 import ]")]),e._v(" "),t("li",[e._v("history  Show the history of an image          # 展示一个镜像形成历史")]),e._v(" "),t("li",[e._v("images   List images                  # 列出系统当前镜像")]),e._v(" "),t("li",[e._v("import   Create a new filesystem image from the contents of a tarball # 从tar包中的内容创建一个新的文件系统映像[对应export]")]),e._v(" "),t("li",[e._v("info    Display system-wide information        # 显示系统相关信息")]),e._v(" "),t("li",[e._v("inspect  Return low-level information on a container  # 查看容器详细信息")]),e._v(" "),t("li",[e._v("kill    Kill a running container            # kill 指定 docker 容器")]),e._v(" "),t("li",[e._v("load    Load an image from a tar archive        # 从一个 tar 包中加载一个镜像[对应 save]")]),e._v(" "),t("li",[e._v("login   Register or Login to the docker registry server   # 注册或者登陆一个 docker 源服务器")]),e._v(" "),t("li",[e._v("logout   Log out from a Docker registry server      # 从当前 Docker registry 退出")]),e._v(" "),t("li",[e._v("logs    Fetch the logs of a container         # 输出当前容器日志信息")]),e._v(" "),t("li",[e._v("port    Lookup the public-facing port which is NAT-ed to PRIVATE_PORT   # 查看映射端口对应的容器内部源端口")]),e._v(" "),t("li",[e._v("pause   Pause all processes within a container     # 暂停容器")]),e._v(" "),t("li",[e._v("ps     List containers                # 列出容器列表")]),e._v(" "),t("li",[e._v("pull    Pull an image or a repository from the docker registry server  # 从docker镜像源服务器拉取指定镜像或者库镜像")]),e._v(" "),t("li",[e._v("push    Push an image or a repository to the docker registry server   # 推送指定镜像或者库镜像至docker源服务器")]),e._v(" "),t("li",[e._v("restart  Restart a running container          # 重启运行的容器")]),e._v(" "),t("li",[e._v("rm     Remove one or more containers         # 移除一个或者多个容器")]),e._v(" "),t("li",[e._v("rmi    Remove one or more images    # 移除一个或多个镜像[无容器使用该镜像才可删除，否则需删除相关容器才可继续或 -f 强制删除]")]),e._v(" "),t("li",[e._v("run    Run a command in a new container        # 创建一个新的容器并运行一个命令")]),e._v(" "),t("li",[e._v("save    Save an image to a tar archive         # 保存一个镜像为一个 tar 包[对应 load]")]),e._v(" "),t("li",[e._v("search   Search for an image on the Docker Hub     # 在 docker hub 中搜索镜像")]),e._v(" "),t("li",[e._v("start   Start a stopped containers           # 启动容器")]),e._v(" "),t("li",[e._v("stop    Stop a running containers           # 停止容器")]),e._v(" "),t("li",[e._v("tag    Tag an image into a repository         # 给源中镜像打标签")]),e._v(" "),t("li",[e._v("top    Lookup the running processes of a container  # 查看容器中运行的进程信息")]),e._v(" "),t("li",[e._v("unpause  Unpause a paused container           # 取消暂停容器")]),e._v(" "),t("li",[e._v("version  Show the docker version information      # 查看 docker 版本号")]),e._v(" "),t("li",[e._v("wait    Block until a container stops, then print its exit code  # 截取容器停止时的退出状态值")])]),e._v(" "),t("h2",{attrs:{id:"四、docker-镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四、docker-镜像"}},[e._v("#")]),e._v(" 四、Docker 镜像")]),e._v(" "),t("h3",{attrs:{id:"_1、是什么-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、是什么-2"}},[e._v("#")]),e._v(" 1、是什么")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("是什么")]),e._v(" "),t("p",[e._v("是一种轻量级、可执行的独立软件包，它包含运行某个软件所需的所有内容，我们把应用程序和配置依赖打包好形成一个可交付的运行环境(包括代码、运行时需要的库、环境变量和配置文件等)，这个打包好的运行环境就是image镜像文件。")]),e._v(" "),t("p",[e._v("只有通过这个镜像文件才能生成Docker容器实例(类似Java中new出来一个对象)。")])]),e._v(" "),t("li",[t("p",[e._v("分层的镜像")]),e._v(" "),t("p",[e._v("以我们的pull为例，在下载的过程中我们可以看到docker的镜像好像是在一层一层的在下载")]),e._v(" "),t("p",[t("img",{attrs:{src:"Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%B0%9A%E7%A1%85%E8%B0%B7/%E5%9F%BA%E7%A1%80%E7%AF%87/Docker%E9%95%9C%E5%83%8F/%E6%98%AF%E4%BB%80%E4%B9%88%E5%88%86%E5%B1%82%E7%9A%84%E9%95%9C%E5%83%8F.png",alt:""}})])]),e._v(" "),t("li",[t("p",[e._v("UnionFS（联合文件系统）")]),e._v(" "),t("p",[e._v("UnionFS（联合文件系统）：Union文件系统（UnionFS）是一种分层、轻量级并且高性能的文件系统，它支持"),t("strong",[e._v("对文件系统的修改作为一次提交来一层层的叠加")]),e._v("，同时可以将不同目录挂载到同一个虚拟文件系统下(unite several directories into a single virtual filesystem)。Union 文件系统是 Docker 镜像的基础。"),t("strong",[e._v("镜像可以通过分层来进行继承")]),e._v("，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。")]),e._v(" "),t("p",[e._v("特性：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录")])]),e._v(" "),t("li",[t("p",[e._v("Docker镜像加载原理")])])]),e._v(" "),t("ul",[t("li",[e._v("Docker镜像加载原理：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v(" docker的镜像实际上由一层一层的文件系统组成，这种层级的文件系统UnionFS。\n\n bootfs(boot file system)主要包含bootloader和kernel, bootloader主要是引导加载kernel, Linux刚启动时会加载bootfs文件系统，**在Docker镜像的最底层是引导文件系统bootfs**。这一层与我们典型的Linux/Unix系统是一样的，包含boot加载器和内核。当boot加载完成之后整个内核就都在内存中了，此时内存的使用权已由bootfs转交给内核，此时系统也会卸载bootfs。\n\n rootfs (root file system) ，在bootfs之上。包含的就是典型 Linux 系统中的 /dev, /proc, /bin, /etc 等标准目录和文件。rootfs就是各种不同的操作系统发行版，比如Ubuntu，Centos等等。\n")])])]),t("ul",[t("li",[t("p",[e._v("平时我们安装进虚拟机的CentOS都是好几个G，为什么docker这里才200M？？")]),e._v(" "),t("p",[e._v("对于一个精简的OS，rootfs可以很小，只需要包括最基本的命令、工具和程序库就可以了，因为底层直接用Host的kernel，自己只需要提供 rootfs 就行了。由此可见对于不同的linux发行版, bootfs基本是一致的, rootfs会有差别, 因此不同的发行版可以公用bootfs。")])])]),e._v(" "),t("ol",{attrs:{start:"5"}},[t("li",[t("p",[e._v("为什么 Docker 镜像要采用这种分层结构呢")]),e._v(" "),t("p",[e._v("镜像分层最大的一个好处就是共享资源，方便复制迁移，就是为了"),t("strong",[e._v("复用")]),e._v("。比如说有多个镜像都从相同的 base 镜像构建而来，那么 Docker Host 只需在磁盘上保存一份 base 镜像；同时内存中也只需加载一份 base 镜像，就可以为所有容器服务了。而且镜像的每一层都可以被共享。")])])]),e._v(" "),t("h3",{attrs:{id:"_2、重点理解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、重点理解"}},[e._v("#")]),e._v(" 2、重点理解")]),e._v(" "),t("p",[e._v("Docker镜像层都是只读的，容器层是可写的。当容器启动时，一个新的可写层被加载到镜像的顶部。这一层通常被称作“容器层”，“容器层”之下的都叫“镜像层”。")]),e._v(" "),t("p",[t("img",{attrs:{src:"Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%B0%9A%E7%A1%85%E8%B0%B7/%E5%9F%BA%E7%A1%80%E7%AF%87/Docker%E9%95%9C%E5%83%8F/%E9%87%8D%E7%82%B9%E7%90%86%E8%A7%A3.png",alt:""}})]),e._v(" "),t("blockquote",[t("p",[e._v("所有对容器的改动 - 无论添加、删除、还是修改文件都只会发生在容器层中。只有容器层是可写的，容器层下面的所有镜像层都是只读的。")])]),e._v(" "),t("h3",{attrs:{id:"_3、docker镜像commit操作案例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、docker镜像commit操作案例"}},[e._v("#")]),e._v(" 3、Docker镜像commit操作案例")]),e._v(" "),t("p",[e._v("docker commit 提交容器副本使之成为一个新的镜像")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" commit "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-m")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"提交的描述信息"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-a")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"作者"')]),e._v(" 容器ID 要创建的目标镜像名:"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("标签名"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n")])])]),t("ol",[t("li",[t("p",[e._v("案例演示 ubuntu 安装 vim")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("从Hub上下载ubuntu镜像到本地并成功运行")])]),e._v(" "),t("li",[t("p",[e._v("原始的默认Ubuntu镜像是不带着vim命令的")])]),e._v(" "),t("li",[t("p",[e._v("外网连通的情况下，安装vim")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 先更新我们的包管理工具")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("apt-get")]),e._v(" update\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 然后安装我们需要的 vim")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("apt-get")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-y")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("vim")]),e._v("\n")])])]),t("blockquote",[t("p",[e._v("Docker 容器内执行上述两条命令")])]),e._v(" "),t("p",[t("img",{attrs:{src:"Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%B0%9A%E7%A1%85%E8%B0%B7/%E5%9F%BA%E7%A1%80%E7%AF%87/Docker%E9%95%9C%E5%83%8F/Docker%E9%95%9C%E5%83%8Fcommit%E6%93%8D%E4%BD%9C%E6%A1%88%E4%BE%8B%E6%A1%88%E4%BE%8B%E6%BC%94%E7%A4%BA%E4%BB%8Eubuntu%E5%AE%89%E8%A3%85vim%E5%A4%96%E7%BD%91%E8%81%94%E9%80%9A%E5%AE%89%E8%A3%85vim1.png",alt:""}})]),e._v(" "),t("p",[t("img",{attrs:{src:"Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%B0%9A%E7%A1%85%E8%B0%B7/%E5%9F%BA%E7%A1%80%E7%AF%87/Docker%E9%95%9C%E5%83%8F/Docker%E9%95%9C%E5%83%8Fcommit%E6%93%8D%E4%BD%9C%E6%A1%88%E4%BE%8B%E6%A1%88%E4%BE%8B%E6%BC%94%E7%A4%BA%E4%BB%8Eubuntu%E5%AE%89%E8%A3%85vim%E5%A4%96%E7%BD%91%E8%81%94%E9%80%9A%E5%AE%89%E8%A3%85vim2.png",alt:""}})])]),e._v(" "),t("li",[t("p",[e._v("安装完成后，commit我们自己的新镜像")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" commit "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-m")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"vim cmd add ok"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-a")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"itwangcoder"')]),e._v(" 3fdf5355bf3f itwangcoder/myubuntu:1.3\n")])])]),t("p",[t("img",{attrs:{src:"Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%B0%9A%E7%A1%85%E8%B0%B7/%E5%9F%BA%E7%A1%80%E7%AF%87/Docker%E9%95%9C%E5%83%8F/Docker%E9%95%9C%E5%83%8Fcommit%E6%93%8D%E4%BD%9C%E6%A1%88%E4%BE%8B%E6%A1%88%E4%BE%8B%E6%BC%94%E7%A4%BA%E4%BB%8Eubuntu%E5%AE%89%E8%A3%85vim%E5%AE%89%E8%A3%85%E5%AE%8C%E6%88%90%E5%90%8Ecommit%E6%96%B0%E9%95%9C%E5%83%8F1.png",alt:""}})]),e._v(" "),t("p",[t("img",{attrs:{src:"Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%B0%9A%E7%A1%85%E8%B0%B7/%E5%9F%BA%E7%A1%80%E7%AF%87/Docker%E9%95%9C%E5%83%8F/Docker%E9%95%9C%E5%83%8Fcommit%E6%93%8D%E4%BD%9C%E6%A1%88%E4%BE%8B%E6%A1%88%E4%BE%8B%E6%BC%94%E7%A4%BA%E4%BB%8Eubuntu%E5%AE%89%E8%A3%85vim%E5%AE%89%E8%A3%85%E5%AE%8C%E6%88%90%E5%90%8Ecommit%E6%96%B0%E9%95%9C%E5%83%8F2.png",alt:""}})])]),e._v(" "),t("li",[t("p",[e._v("启动我们的新镜像并和原来的对比")]),e._v(" "),t("ol",[t("li",[e._v("官网是默认下载的Ubuntu没有vim命令")]),e._v(" "),t("li",[e._v("我们自己commit构建的镜像，新增加了vim功能，可以成功使用。")])])])])]),e._v(" "),t("li",[t("p",[e._v("小总结")]),e._v(" "),t("p",[e._v("Docker中的镜像分层，"),t("strong",[e._v("支持通过扩展现有镜像，创建新的镜像")]),e._v("。类似Java继承于一个Base基础类，自己再按需扩展。")]),e._v(" "),t("p",[e._v("新镜像是从 base 镜像一层一层叠加生成的。每安装一个软件，就在现有镜像的基础上增加一层")]),e._v(" "),t("p",[t("img",{attrs:{src:"Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%B0%9A%E7%A1%85%E8%B0%B7/%E5%9F%BA%E7%A1%80%E7%AF%87/Docker%E9%95%9C%E5%83%8F/Docker%E9%95%9C%E5%83%8Fcommit%E6%93%8D%E4%BD%9C%E6%A1%88%E4%BE%8B%E5%B0%8F%E6%80%BB%E7%BB%93.png",alt:""}})])])]),e._v(" "),t("h2",{attrs:{id:"五、本地镜像发布到阿里云"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#五、本地镜像发布到阿里云"}},[e._v("#")]),e._v(" 五、本地镜像发布到阿里云")]),e._v(" "),t("h3",{attrs:{id:"_1、本地镜像发布到阿里云流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、本地镜像发布到阿里云流程"}},[e._v("#")]),e._v(" 1、本地镜像发布到阿里云流程")]),e._v(" "),t("p",[t("img",{attrs:{src:"Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%B0%9A%E7%A1%85%E8%B0%B7/%E5%9F%BA%E7%A1%80%E7%AF%87/%E6%9C%AC%E5%9C%B0%E9%95%9C%E5%83%8F%E5%8F%91%E5%B8%83%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91/%E6%9C%AC%E5%9C%B0%E9%95%9C%E5%83%8F%E5%8F%91%E5%B8%83%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91%E6%B5%81%E7%A8%8B.png",alt:""}})]),e._v(" "),t("h3",{attrs:{id:"_2、镜像的生成方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、镜像的生成方法"}},[e._v("#")]),e._v(" 2、镜像的生成方法")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("基于当前容器创建一个新的镜像，新功能增强")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" commit "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("OPTIONS"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" 容器ID "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("REPOSITORY"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v(":TAG"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n")])])]),t("p",[e._v("OPTIONS说明：")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("-a：提交的镜像作者")])]),e._v(" "),t("li",[t("p",[e._v("-m：提交时的说明文字")])])])]),e._v(" "),t("li",[t("p",[e._v("后面的DockerFile章节，第2种方法")])])]),e._v(" "),t("h3",{attrs:{id:"_3、将本地镜像推送到阿里云"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、将本地镜像推送到阿里云"}},[e._v("#")]),e._v(" 3、将本地镜像推送到阿里云")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("本地镜像素材原型")]),e._v(" "),t("p",[e._v("上面提交的 ubuntu 镜像")])]),e._v(" "),t("li",[t("p",[e._v("阿里云开发者平台")]),e._v(" "),t("p",[e._v("网络地址：https://promotion.aliyun.com/ntms/act/kubernetes.html")])]),e._v(" "),t("li",[t("p",[e._v("创建仓库镜像")]),e._v(" "),t("ol",[t("li",[e._v("选择控制台，进入容器镜像服务")]),e._v(" "),t("li",[e._v("选择个人实例")]),e._v(" "),t("li",[e._v("创建命名空间")]),e._v(" "),t("li",[e._v("创建仓库名称")]),e._v(" "),t("li",[e._v("进入管理界面获得脚本")])])]),e._v(" "),t("li",[t("p",[e._v("将镜像推送到阿里云")]),e._v(" "),t("p",[e._v("将镜像推送到阿里云registry")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("管理界面脚本")]),e._v(" "),t("p",[t("img",{attrs:{src:"Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%B0%9A%E7%A1%85%E8%B0%B7/%E5%9F%BA%E7%A1%80%E7%AF%87/%E6%9C%AC%E5%9C%B0%E9%95%9C%E5%83%8F%E5%8F%91%E5%B8%83%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91/%E5%B0%86%E6%9C%AC%E5%9C%B0%E9%95%9C%E5%83%8F%E6%8E%A8%E9%80%81%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91%E5%B0%86%E9%95%9C%E5%83%8F%E6%8E%A8%E9%80%81%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91%E7%AE%A1%E7%90%86%E7%95%8C%E9%9D%A2%E8%84%9A%E6%9C%AC.png",alt:""}})])]),e._v(" "),t("li",[t("p",[e._v("脚本实例")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[e._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" login "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--username")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("aliyun4613106518 registry.cn-hangzhou.aliyuncs.com\n$ "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" tag "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("ImageId"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" registry.cn-hangzhou.aliyuncs.com/itwangxian/myubuntu:"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("镜像版本号"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n$ "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" push registry.cn-hangzhou.aliyuncs.com/itwangxian/myubuntu:"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("镜像版本号"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n")])])]),t("p",[t("img",{attrs:{src:"Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%B0%9A%E7%A1%85%E8%B0%B7/%E5%9F%BA%E7%A1%80%E7%AF%87/%E6%9C%AC%E5%9C%B0%E9%95%9C%E5%83%8F%E5%8F%91%E5%B8%83%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91/%E5%B0%86%E6%9C%AC%E5%9C%B0%E9%95%9C%E5%83%8F%E6%8E%A8%E9%80%81%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91%E5%B0%86%E9%95%9C%E5%83%8F%E6%8E%A8%E9%80%81%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91%E8%84%9A%E6%9C%AC%E5%AE%9E%E4%BE%8B.png",alt:""}})])])])])]),e._v(" "),t("h3",{attrs:{id:"_4、将阿里云上的镜像下载到本地"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、将阿里云上的镜像下载到本地"}},[e._v("#")]),e._v(" 4、将阿里云上的镜像下载到本地")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 下载到本地")]),e._v("\n$ "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" pull registry.cn-hangzhou.aliyuncs.com/itwangxian/myubuntu:"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("镜像版本号"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n")])])]),t("h2",{attrs:{id:"六、本地镜像发布到私有库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#六、本地镜像发布到私有库"}},[e._v("#")]),e._v(" 六、本地镜像发布到私有库")]),e._v(" "),t("h3",{attrs:{id:"_1、本地镜像发布到私有库流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、本地镜像发布到私有库流程"}},[e._v("#")]),e._v(" 1、本地镜像发布到私有库流程")]),e._v(" "),t("p",[t("img",{attrs:{src:"Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%B0%9A%E7%A1%85%E8%B0%B7/%E5%9F%BA%E7%A1%80%E7%AF%87/%E6%9C%AC%E5%9C%B0%E9%95%9C%E5%83%8F%E5%8F%91%E5%B8%83%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91/%E6%9C%AC%E5%9C%B0%E9%95%9C%E5%83%8F%E5%8F%91%E5%B8%83%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91%E6%B5%81%E7%A8%8B.png",alt:""}})]),e._v(" "),t("h3",{attrs:{id:"_2、是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、是什么"}},[e._v("#")]),e._v(" 2、是什么")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("官方Docker Hub地址：https://hub.docker.com/，中国大陆访问太慢了且准备被阿里云取代的趋势，不太主流。")])]),e._v(" "),t("li",[t("p",[e._v("Dockerhub、阿里云这样的公共镜像仓库可能不太方便，涉及机密的公司不可能提供镜像给公网，所以需要创建一个本地私人仓库供给团队使用，基于公司内部项目构建镜像。")]),e._v(" "),t("blockquote",[t("p",[e._v("Docker Registry是官方提供的工具，可以用于构建私有镜像仓库")])])])]),e._v(" "),t("h3",{attrs:{id:"_3、将本地镜像推送到私有库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、将本地镜像推送到私有库"}},[e._v("#")]),e._v(" 3、将本地镜像推送到私有库")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("下载镜像Docker Registry")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" pull registry\n")])])])]),e._v(" "),t("li",[t("p",[e._v("运行私有库Registry，相当于本地有个私有Docker hub")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" run "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-d")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-p")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("5000")]),e._v(":5000  "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-v")]),e._v(" /opt/myregistry/:/tmp/registry "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--privileged")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("true registry\n")])])]),t("p",[e._v("默认情况，仓库被创建在容器的 /var/lib/registry 目录下，建议自行用容器卷映射，方便于宿主机联调")]),e._v(" "),t("p",[t("img",{attrs:{src:"Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%B0%9A%E7%A1%85%E8%B0%B7/%E5%9F%BA%E7%A1%80%E7%AF%87/%E6%9C%AC%E5%9C%B0%E9%95%9C%E5%83%8F%E5%8F%91%E5%B8%83%E5%88%B0%E7%A7%81%E6%9C%89%E5%BA%93/%E6%9C%AC%E5%9C%B0%E9%95%9C%E5%83%8F%E5%8F%91%E5%B8%83%E5%88%B0%E7%A7%81%E6%9C%89%E5%BA%93%E5%B0%86%E6%9C%AC%E5%9C%B0%E9%95%9C%E5%83%8F%E6%8E%A8%E9%80%81%E5%88%B0%E7%A7%81%E6%9C%89%E5%BA%93%E8%BF%90%E8%A1%8C%E7%A7%81%E6%9C%89%E5%BA%93Registry.png",alt:""}})])]),e._v(" "),t("li",[t("p",[e._v("案例演示创建一个新镜像，ubuntu安装ifconfig命令")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("从Hub上下载ubuntu镜像到本地并成功运行")])]),e._v(" "),t("li",[t("p",[e._v("原始的Ubuntu镜像是不带着ifconfig命令的")])]),e._v(" "),t("li",[t("p",[e._v("外网连通的情况下，安装ifconfig命令并测试通过")]),e._v(" "),t("p",[e._v("docker容器内执行上述两条命令：")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("apt-get")]),e._v(" update\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("apt-get")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" net-tools\n\n")])])])]),e._v(" "),t("li",[t("p",[e._v("安装完成后，commit我们自己的新镜像")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("公式：")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" commit "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-m")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"提交的描述信息"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-a")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"作者"')]),e._v(" 容器ID 要创建的目标镜像名:"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("标签名"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n\n")])])])]),e._v(" "),t("li",[t("p",[e._v("命令：在容器外执行，记得")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" commit "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-m")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"ifconfig cmd add"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-a")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"itwangcoder"')]),e._v(" 5d205666e0e4 itwangubuntu:1.2\n\n")])])])])])]),e._v(" "),t("li",[t("p",[e._v("启动我们的新镜像并和原来的对比")]),e._v(" "),t("ol",[t("li",[e._v("官网是默认下载的Ubuntu没有ifconfig命令")]),e._v(" "),t("li",[e._v("我们自己commit构建的新镜像，新增加了ifconfig功能，可以成功使用。")])])])])]),e._v(" "),t("li",[t("p",[e._v("curl验证私服库上有什么镜像")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("curl")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-XGET")]),e._v(" http://192.168.37.128:5000/v2/_catalog\n")])])]),t("p",[e._v("可以看到，目前私服库没有任何镜像上传过。。。。。。")]),e._v(" "),t("p",[t("img",{attrs:{src:"Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%B0%9A%E7%A1%85%E8%B0%B7/%E5%9F%BA%E7%A1%80%E7%AF%87/%E6%9C%AC%E5%9C%B0%E9%95%9C%E5%83%8F%E5%8F%91%E5%B8%83%E5%88%B0%E7%A7%81%E6%9C%89%E5%BA%93/%E6%9C%AC%E5%9C%B0%E9%95%9C%E5%83%8F%E5%8F%91%E5%B8%83%E5%88%B0%E7%A7%81%E6%9C%89%E5%BA%93%E5%B0%86%E6%9C%AC%E5%9C%B0%E9%95%9C%E5%83%8F%E6%8E%A8%E9%80%81%E5%88%B0%E7%A7%81%E6%9C%89%E5%BA%93curl%E9%AA%8C%E8%AF%81%E7%A7%81%E6%9C%8D%E5%BA%93%E6%9C%89%E4%BB%80%E4%B9%88%E9%95%9C%E5%83%8F.png",alt:""}})])]),e._v(" "),t("li",[t("p",[e._v("将新镜像zzyyubuntu:1.2修改符合私服规范的Tag")]),e._v(" "),t("p",[e._v("按照公式：")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" tag 镜像:Tag Host:Port/Repository:Tag\n")])])]),t("p",[e._v("自己host主机IP地址，填写同学你们自己的，不要粘贴错误，O(∩_∩)O")]),e._v(" "),t("p",[e._v("使用命令 docker tag 将 itwangubuntu:1.2 这个镜像修改为192.168.37.128:5000/itwangubuntu:1.2")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" tag itwangubuntu:1.2 "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("192.168")]),e._v(".37.128:5000/itwangubuntu:1.2\n\n")])])])]),e._v(" "),t("li",[t("p",[e._v("修改配置文件使之支持http")]),e._v(" "),t("blockquote",[t("p",[e._v("别无脑照着复制，registry-mirrors 配置的是国内阿里提供的镜像加速地址，不用加速的话访问官网的会很慢。")]),e._v(" "),t("p",[t("em",[t("em",[e._v("2个配置中间有个逗号 ','别漏了")]),e._v("，这个配置是json格式的。")]),e._v("*")])]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[e._v("vim命令新增如下红色内容：vim /etc/docker/daemon.json\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"registry-mirrors"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"https://aa25jngu.mirror.aliyuncs.com"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(",\n  "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"insecure-registries"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"192.168.37.128:5000"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),t("p",[e._v("上述理由：docker默认不允许http方式推送镜像，通过配置选项来取消这个限制。====> "),t("strong",[e._v("修改完后如果不生效，建议重启docker")])])]),e._v(" "),t("li",[t("p",[e._v("push推送到私服库")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" push "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("192.168")]),e._v(".37.128:5000/itwangubuntu:1.2\n\n")])])])]),e._v(" "),t("li",[t("p",[e._v("curl验证私服库上有什么镜像2")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("curl")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-XGET")]),e._v(" http://192.168.37.128:5000/v2/_catalog\n")])])]),t("p",[t("img",{attrs:{src:"Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%B0%9A%E7%A1%85%E8%B0%B7/%E5%9F%BA%E7%A1%80%E7%AF%87/%E6%9C%AC%E5%9C%B0%E9%95%9C%E5%83%8F%E5%8F%91%E5%B8%83%E5%88%B0%E7%A7%81%E6%9C%89%E5%BA%93/%E6%9C%AC%E5%9C%B0%E9%95%9C%E5%83%8F%E5%8F%91%E5%B8%83%E5%88%B0%E7%A7%81%E6%9C%89%E5%BA%93%E5%B0%86%E6%9C%AC%E5%9C%B0%E9%95%9C%E5%83%8F%E6%8E%A8%E9%80%81%E5%88%B0%E7%A7%81%E6%9C%89%E5%BA%93%E7%AC%AC%E4%BA%8C%E6%AC%A1curl%E9%AA%8C%E8%AF%81%E7%A7%81%E6%9C%8D%E5%BA%93%E6%9C%89%E4%BB%80%E4%B9%88%E9%95%9C%E5%83%8F.png",alt:""}})])]),e._v(" "),t("li",[t("p",[e._v("pull到本地并运行")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" pull "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("192.168")]),e._v(".37.128:5000/itwangubuntu:1.2\n")])])]),t("p",[t("img",{attrs:{src:"Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%B0%9A%E7%A1%85%E8%B0%B7/%E5%9F%BA%E7%A1%80%E7%AF%87/%E6%9C%AC%E5%9C%B0%E9%95%9C%E5%83%8F%E5%8F%91%E5%B8%83%E5%88%B0%E7%A7%81%E6%9C%89%E5%BA%93/%E6%9C%AC%E5%9C%B0%E9%95%9C%E5%83%8F%E5%8F%91%E5%B8%83%E5%88%B0%E7%A7%81%E6%9C%89%E5%BA%93%E5%B0%86%E6%9C%AC%E5%9C%B0%E9%95%9C%E5%83%8F%E6%8E%A8%E9%80%81%E5%88%B0%E7%A7%81%E6%9C%89%E5%BA%93pull%E5%88%B0%E6%9C%AC%E5%9C%B0%E5%B9%B6%E8%BF%90%E8%A1%8C.png",alt:""}})]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" run "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-it")]),e._v(" 5ff5c8db8bab /bin/bash\n")])])]),t("p",[t("img",{attrs:{src:"Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%B0%9A%E7%A1%85%E8%B0%B7/%E5%9F%BA%E7%A1%80%E7%AF%87/%E6%9C%AC%E5%9C%B0%E9%95%9C%E5%83%8F%E5%8F%91%E5%B8%83%E5%88%B0%E7%A7%81%E6%9C%89%E5%BA%93/%E6%9C%AC%E5%9C%B0%E9%95%9C%E5%83%8F%E5%8F%91%E5%B8%83%E5%88%B0%E7%A7%81%E6%9C%89%E5%BA%93%E5%B0%86%E6%9C%AC%E5%9C%B0%E9%95%9C%E5%83%8F%E6%8E%A8%E9%80%81%E5%88%B0%E7%A7%81%E6%9C%89%E5%BA%93pull%E5%88%B0%E6%9C%AC%E5%9C%B0%E5%B9%B6%E8%BF%90%E8%A1%8C2.png",alt:""}})])])]),e._v(" "),t("h2",{attrs:{id:"七、docker-容器数据卷"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#七、docker-容器数据卷"}},[e._v("#")]),e._v(" 七、Docker 容器数据卷")]),e._v(" "),t("h3",{attrs:{id:"_1、坑-容器卷记得加入"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、坑-容器卷记得加入"}},[e._v("#")]),e._v(" 1、坑：容器卷记得加入")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--privileged")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("true\n")])])]),t("p",[e._v("Docker挂载主机目录访问"),t("strong",[e._v("如果出现cannot open directory .: Permission denied")])]),e._v(" "),t("p",[e._v("解决办法：在挂载目录后多加一个 --privileged=true 参数即可")]),e._v(" "),t("blockquote",[t("p",[e._v("如果是CentOS7安全模块会比之前系统版本加强，不安全的会先禁止，所以目录挂载的情况被默认为不安全的行为，在SELinux里面挂载目录被禁止掉了额，如果要开启，我们一般使用--privileged=true命令，扩大容器的权限解决挂载目录没有权限的问题，也即使用该参数，container内的root拥有真正的root权限，否则，container内的root只是外部的一个普通用户权限。")])]),e._v(" "),t("h3",{attrs:{id:"_2、回顾下上一讲的知识点-参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、回顾下上一讲的知识点-参数"}},[e._v("#")]),e._v(" 2、回顾下上一讲的知识点，参数")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" run "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-d")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-p")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("5000")]),e._v(":5000  "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-v")]),e._v(" /opt/myregistry/:/tmp/registry "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--privileged")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("true registry\n")])])]),t("p",[e._v("默认情况，仓库被创建在容器的 /var/lib/registry 目录下，建议自行用容器卷映射，方便于宿主机联调")]),e._v(" "),t("h3",{attrs:{id:"_3、是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、是什么"}},[e._v("#")]),e._v(" 3、是什么")]),e._v(" "),t("blockquote",[t("p",[e._v("卷就是目录或文件，存在于一个或多个容器中，由docker挂载到容器，但不属于联合文件系统，因此能够绕过Union File System提供一些用于持续存储或共享数据的特性：")]),e._v(" "),t("p",[e._v("卷的设计目的就是"),t("strong",[e._v("数据的持久化")]),e._v("，完全独立于容器的生存周期，因此Docker不会在容器删除时删除其挂载的数据卷")])]),e._v(" "),t("p",[e._v("一句话：有点类似我们Redis里面的rdb和aof文件，将docker容器内的数据保存进宿主机的磁盘中")]),e._v(" "),t("p",[e._v("运行一个带有容器卷存储功能的容器实例")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" run "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-it")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--privileged")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("true "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-v")]),e._v(" /宿主机绝对路径目录:/容器内目录      镜像名\n")])])]),t("h3",{attrs:{id:"_4、能干嘛"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、能干嘛"}},[e._v("#")]),e._v(" 4、能干嘛")]),e._v(" "),t("p",[e._v("将运用与运行的环境打包镜像，run后形成容器实例运行 ，但是我们对数据的要求希望是"),t("strong",[e._v("持久化的")]),e._v("。Docker容器产生的数据，如果不备份，那么当容器实例删除后，容器内的数据自然也就没有了。为了能保存数据在docker中我们使用卷。")]),e._v(" "),t("p",[e._v("特点：")]),e._v(" "),t("ol",[t("li",[e._v("数据卷可在容器之间共享或重用数据")]),e._v(" "),t("li",[e._v("卷中的更改可以直接实时生效，爽")]),e._v(" "),t("li",[e._v("数据卷中的更改不会包含在镜像的更新中")]),e._v(" "),t("li",[e._v("数据卷的生命周期一直持续到没有容器使用它为止")])]),e._v(" "),t("h3",{attrs:{id:"_5、数据卷案例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5、数据卷案例"}},[e._v("#")]),e._v(" 5、数据卷案例")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("宿主vs容器之间映射添加容器卷")]),e._v(" "),t("p",[e._v("直接命令添加")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("命令")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" run "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-it")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--privileged")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("true "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-v")]),e._v(" /宿主机绝对路径目录:/容器内目录 镜像名\n公式：docker run "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-it")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-v")]),e._v(" /宿主机目录:/容器内目录 ubuntu /bin/bash\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" run "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-it")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--name")]),e._v(" myu3 "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--privileged")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("true "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-v")]),e._v(" /tmp/host_data:/tmp/docker_data ubuntu /bin/bash\n")])])])]),e._v(" "),t("li",[t("p",[e._v("查看数据卷是否挂载成功")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" inspect 容器ID\n")])])]),t("p",[t("img",{attrs:{src:"Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%B0%9A%E7%A1%85%E8%B0%B7/%E5%9F%BA%E7%A1%80%E7%AF%87/Docker%E5%AE%B9%E5%99%A8%E6%95%B0%E6%8D%AE%E5%8D%B7/%E6%95%B0%E6%8D%AE%E5%8D%B7%E6%A1%88%E4%BE%8B%E5%AE%BF%E4%B8%BB%E4%B8%8E%E5%AE%B9%E5%99%A8%E4%B9%8B%E9%97%B4%E6%98%A0%E5%B0%84%E6%B7%BB%E5%8A%A0%E5%AE%B9%E5%99%A8%E5%8D%B7%E6%9F%A5%E7%9C%8B%E6%95%B0%E6%8D%AE%E5%8D%B7%E6%98%AF%E5%90%A6%E6%8C%82%E8%BD%BD%E6%88%90%E5%8A%9F.png",alt:""}})])]),e._v(" "),t("li",[t("p",[e._v("容器和宿主机之间数据共享")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("docker修改，主机同步获得")])]),e._v(" "),t("li",[t("p",[e._v("主机修改，docker同步获得")])]),e._v(" "),t("li",[t("p",[e._v("docker容器stop，主机修改，docker容器重启看数据是否同步。")]),e._v(" "),t("p",[t("img",{attrs:{src:"Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%B0%9A%E7%A1%85%E8%B0%B7/%E5%9F%BA%E7%A1%80%E7%AF%87/Docker%E5%AE%B9%E5%99%A8%E6%95%B0%E6%8D%AE%E5%8D%B7/%E6%95%B0%E6%8D%AE%E5%8D%B7%E6%A1%88%E4%BE%8B%E5%AE%BF%E4%B8%BB%E4%B8%8E%E5%AE%B9%E5%99%A8%E4%B9%8B%E9%97%B4%E6%98%A0%E5%B0%84%E6%B7%BB%E5%8A%A0%E5%AE%B9%E5%99%A8%E5%8D%B7%E5%AE%B9%E5%99%A8%E5%92%8C%E5%AE%BF%E4%B8%BB%E6%9C%BA%E4%B9%8B%E9%97%B4%E6%95%B0%E6%8D%AE%E5%85%B1%E4%BA%AB.png",alt:""}})])])])])])]),e._v(" "),t("li",[t("p",[e._v("读写规则映射添加说明")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("读写(默认)")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" run "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-it")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--privileged")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("true "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-v")]),e._v(" /宿主机绝对路径目录:/容器内目录:rw 镜像名\n")])])]),t("p",[e._v("默认同上案例，默认就是rw（rw = read + write）")])]),e._v(" "),t("li",[t("p",[e._v("只读")]),e._v(" "),t("p",[e._v("容器实例内部被限制，只能读取不能写")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" run "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-it")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--privileged")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("true "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-v")]),e._v(" /宿主机绝对路径目录:/容器内目录:ro 镜像名\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" run "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-it")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--privileged")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("true "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-v")]),e._v(" /tmp/u:/tmp/u:ro "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--name")]),e._v(" u2 ubuntu\n")])])]),t("p",[t("img",{attrs:{src:"Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%B0%9A%E7%A1%85%E8%B0%B7/%E5%9F%BA%E7%A1%80%E7%AF%87/Docker%E5%AE%B9%E5%99%A8%E6%95%B0%E6%8D%AE%E5%8D%B7/%E6%95%B0%E6%8D%AE%E5%8D%B7%E6%A1%88%E4%BE%8B%E8%AF%BB%E5%86%99%E8%A7%84%E5%88%99%E6%98%A0%E5%B0%84%E6%B7%BB%E5%8A%A0%E8%AF%B4%E6%98%8E%E5%8F%AA%E8%AF%BB.png",alt:""}})]),e._v(" "),t("blockquote",[t("p",[e._v("/容器目录:ro 镜像名        就能完成功能，此时容器自己只能读取不能写")]),e._v(" "),t("p",[e._v("ro = read only")]),e._v(" "),t("p",[e._v("此时如果宿主机写入内容，可以同步给容器内，容器可以读取到。")])])])])]),e._v(" "),t("li",[t("p",[e._v("卷的继承和共享")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("容器1完成和宿主机的映射")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" run "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-it")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--privileged")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("true "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-v")]),e._v(" /tmp/u:/tmp/u "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--name")]),e._v(" u1 ubuntu /bin/bash\n")])])])]),e._v(" "),t("li",[t("p",[e._v("容器2继承容器1的卷规则")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" run "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-it")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--privileged")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("true --volumes-from 父类  "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--name")]),e._v(" u2 ubuntu\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" run "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-it")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--privileged")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("true --volumes-from u1 "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--name")]),e._v(" u3 ubuntu\n")])])])])])])]),e._v(" "),t("h2",{attrs:{id:"八、docker-常规安装简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#八、docker-常规安装简介"}},[e._v("#")]),e._v(" 八、Docker 常规安装简介")]),e._v(" "),t("h3",{attrs:{id:"_1、总体步骤"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、总体步骤"}},[e._v("#")]),e._v(" 1、总体步骤")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("搜索镜像")])]),e._v(" "),t("li",[t("p",[e._v("拉取镜像")])]),e._v(" "),t("li",[t("p",[e._v("查看镜像")])]),e._v(" "),t("li",[t("p",[e._v("启动镜像")]),e._v(" "),t("p",[e._v("服务端口映射")])]),e._v(" "),t("li",[t("p",[e._v("停止容器")])]),e._v(" "),t("li",[t("p",[e._v("移除容器")])])]),e._v(" "),t("h3",{attrs:{id:"_2、安装tomcat"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、安装tomcat"}},[e._v("#")]),e._v(" 2、安装tomcat")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("docker hub上面查找tomcat镜像")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" search tomcat\n\n")])])])]),e._v(" "),t("li",[t("p",[e._v("从docker hub上拉取tomcat镜像到本地")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" pull tomcat\n")])])])]),e._v(" "),t("li",[t("p",[e._v("docker images查看是否有拉取到的tomcat")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" images tomcat\n")])])])]),e._v(" "),t("li",[t("p",[e._v("使用tomcat镜像创建容器实例(也叫运行镜像)")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" run "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-it")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-p")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("8080")]),e._v(":8080 tomcat\n")])])]),t("ul",[t("li",[t("p",[e._v("-p 小写，主机端口:docker容器端口")])]),e._v(" "),t("li",[t("p",[e._v("-P 大写，随机分配端口")]),e._v(" "),t("p",[t("img",{attrs:{src:"Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%B0%9A%E7%A1%85%E8%B0%B7/%E5%9F%BA%E7%A1%80%E7%AF%87/Docker%E5%B8%B8%E8%A7%84%E5%AE%89%E8%A3%85%E7%AE%80%E4%BB%8B/%E5%AE%89%E8%A3%85tomcat%E4%BD%BF%E7%94%A8tomcat%E9%95%9C%E5%83%8F%E5%88%9B%E5%BB%BA%E5%AE%B9%E5%99%A8%E5%AE%9E%E4%BE%8B.png",alt:""}})])]),e._v(" "),t("li",[t("p",[e._v("i：交互")])]),e._v(" "),t("li",[t("p",[e._v("t：终端")])]),e._v(" "),t("li",[t("p",[e._v("d：后台")])])])]),e._v(" "),t("li",[t("p",[e._v("访问猫首页")]),e._v(" "),t("p",[e._v("问题："),t("strong",[e._v("访问报404")])]),e._v(" "),t("p",[e._v("解决：")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("可能没有映射端口或者没有关闭防火墙")])]),e._v(" "),t("li",[t("p",[e._v("把webapps.dist目录换成webapps")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("先成功启动tomcat")]),e._v(" "),t("p",[t("img",{attrs:{src:"Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%B0%9A%E7%A1%85%E8%B0%B7/%E5%9F%BA%E7%A1%80%E7%AF%87/Docker%E5%B8%B8%E8%A7%84%E5%AE%89%E8%A3%85%E7%AE%80%E4%BB%8B/%E5%AE%89%E8%A3%85tomcat%E8%AE%BF%E9%97%AE%E7%8C%AB%E9%A6%96%E9%A1%B5%E6%8A%8Awebappsdist%E7%9B%AE%E5%BD%95%E6%8D%A2%E6%88%90webapps%E5%85%88%E6%88%90%E5%8A%9F%E5%90%AF%E5%8A%A8tomcat.png",alt:""}})])]),e._v(" "),t("li",[t("p",[e._v("查看webapps 文件夹是否为空")]),e._v(" "),t("p",[t("img",{attrs:{src:"Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%B0%9A%E7%A1%85%E8%B0%B7/%E5%9F%BA%E7%A1%80%E7%AF%87/Docker%E5%B8%B8%E8%A7%84%E5%AE%89%E8%A3%85%E7%AE%80%E4%BB%8B/%E5%AE%89%E8%A3%85tomcat%E8%AE%BF%E9%97%AE%E7%8C%AB%E9%A6%96%E9%A1%B5%E6%8A%8Awebappsdist%E7%9B%AE%E5%BD%95%E6%8D%A2%E6%88%90webapps%E6%9F%A5%E7%9C%8Bwebapps%E6%96%87%E4%BB%B6%E5%A4%B9%E6%98%AF%E5%90%A6%E4%B8%BA%E7%A9%BA.png",alt:""}})])])])])])]),e._v(" "),t("li",[t("p",[e._v("免修改版说明")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" pull billygoo/tomcat8-jdk8\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" run "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-d")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-p")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("8080")]),e._v(":8080 "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--name")]),e._v(" mytomcat8 billygoo/tomcat8-jdk8\n")])])])])]),e._v(" "),t("h3",{attrs:{id:"_3、安装mysql"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、安装mysql"}},[e._v("#")]),e._v(" 3、安装mysql")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("docker hub上面查找mysql镜像")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" search mysql\n\n")])])])]),e._v(" "),t("li",[t("p",[e._v("从docker hub上(阿里云加速器)拉取mysql镜像到本地标签为5.7")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" pull mysql:5.7\n")])])])]),e._v(" "),t("li",[t("p",[e._v("使用mysql5.7镜像创建容器(也叫运行镜像)")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("命令出处，哪里来的？")]),e._v(" "),t("p",[e._v("官网地址：https://hub.docker.com/_/mysql")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[e._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" run "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--name")]),e._v(" some-mysql "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-e")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("MYSQL_ROOT_PASSWORD")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("my-secret-pw "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-d")]),e._v(" mysql:tag\n\n")])])])]),e._v(" "),t("li",[t("p",[e._v("简单版")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("使用mysql镜像")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("service")]),e._v(" mysqld stop\t\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 停止原来 linux 上面占用3306端口的 mysql 服务")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" run "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-p")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("3306")]),e._v(":3306 "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-e")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("MYSQL_ROOT_PASSWORD")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("123456")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-d")]),e._v(" mysql:5.7\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("ps")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("exec")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-it")]),e._v(" 容器ID /bin/bash\nmysql "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-uroot")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-p")]),e._v("\n")])])])]),e._v(" "),t("li",[t("p",[e._v("建库建表插入数据")]),e._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("show databases;\ncreate database db01;\nuse db01;\ncreate table aa(id int,name varchar(20));\ninsert into aa values(1,'z3');\nselect * from aa;\n")])])])]),e._v(" "),t("li",[t("p",[e._v("外部Win10也来连接运行在dokcer上的mysql容器实例服务")])]),e._v(" "),t("li",[t("p",[e._v("问题")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("插入中文数据出现错误")]),e._v(" "),t("p",[e._v("docker上默认字符集编码隐患")]),e._v(" "),t("p",[e._v("docker里面的mysql容器实例查看，内容如下：")]),e._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("SHOW VARIABLES LIKE 'character%';\n")])])]),t("p",[t("img",{attrs:{src:"Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%B0%9A%E7%A1%85%E8%B0%B7/%E5%9F%BA%E7%A1%80%E7%AF%87/Docker%E5%B8%B8%E8%A7%84%E5%AE%89%E8%A3%85%E7%AE%80%E4%BB%8B/%E5%AE%89%E8%A3%85mysql%E4%BD%BF%E7%94%A8mysql5.7%E9%95%9C%E5%83%8F%E5%88%9B%E5%BB%BA%E5%AE%B9%E5%99%A8%E7%AE%80%E5%8D%95%E7%89%88%E9%97%AE%E9%A2%98%E6%8F%92%E5%85%A5%E4%B8%AD%E6%96%87%E6%95%B0%E6%8D%AE%E9%94%99%E8%AF%AF.png",alt:""}})])]),e._v(" "),t("li",[t("p",[e._v("删除容器后，里面的mysql数据如何办")])])])])])]),e._v(" "),t("li",[t("p",[e._v("实战版")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("新建mysql容器实例")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" run "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-d")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-p")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("3306")]),e._v(":3306 "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--privileged")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("true "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-v")]),e._v(" /opt/mysql/log:/var/log/mysql "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-v")]),e._v(" /opt/mysql/data:/var/lib/mysql "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-v")]),e._v(" /opt/mysql/conf:/etc/mysql/conf.d "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-e")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("MYSQL_ROOT_PASSWORD")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("123456")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--name")]),e._v(" mysql mysql:5.7\n")])])])]),e._v(" "),t("li",[t("p",[e._v("新建my.cnf")]),e._v(" "),t("p",[e._v("通过容器卷同步给mysql容器实例")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("vim")]),e._v(" my.cnf\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("cat")]),e._v(" my.cnf\n\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("client"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("default_character_set")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("utf8\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("mysqld"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\ncollation_server "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" utf8_general_ci\ncharacter_set_server "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" utf8\n")])])])]),e._v(" "),t("li",[t("p",[e._v("重新启动mysql容器实例再重新进入并查看字符编码")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" restart mysql\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("exec")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-it")]),e._v(" mysql /bin/bash\nmysql "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-uroot")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-p")]),e._v("\nSHOW VARIABLES LIKE "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'character%'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])])])]),e._v(" "),t("li",[t("p",[e._v("再新建库新建表再插入中文测试")]),e._v(" "),t("div",{staticClass:"language-mysql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("show databases;\ncreate database db01;\nuse db01;\ncreate table aa(id int,name varchar(20));\ninsert into aa values(1,'z3');\ninsert into aa values(3,'李四');\nselect * from aa;\n")])])])]),e._v(" "),t("li",[t("p",[e._v("结论")]),e._v(" "),t("p",[e._v("之前的DB 无效，修改字符集操作+重启mysql容器实例。")]),e._v(" "),t("p",[e._v("之后的DB 有效，需要新建")]),e._v(" "),t("p",[e._v("结论："),t("strong",[e._v("docker安装完MySQL并run出容器后，建议请先修改完字符集编码后再新建mysql库-表-插数据")])])]),e._v(" "),t("li",[t("p",[e._v("假如将当前容器实例删除，再重新来一次，之前建的db01实例还有吗？trytry")]),e._v(" "),t("p",[e._v("结论：数据仍然保存完整，新创建实例后，数据恢复到了新创建的实例上")])])])])])])]),e._v(" "),t("h3",{attrs:{id:"_4、安装redis"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、安装redis"}},[e._v("#")]),e._v(" 4、安装redis")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("从docker hub上(阿里云加速器)拉取redis镜像到本地标签为6.0.8")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" pull redis:6.0.8\n\n")])])])]),e._v(" "),t("li",[t("p",[e._v("入门命令")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" run "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-d")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-p")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("6379")]),e._v(":6379 "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--name")]),e._v(" redis6 redis:6.0.8\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("exec")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-it")]),e._v(" redis6 /bin/bash\nredis-cli\n\n")])])])]),e._v(" "),t("li",[t("p",[e._v("命令提醒：容器卷记得加入--privileged=true")]),e._v(" "),t("p",[e._v("Docker挂载主机目录Docker访问出现cannot open directory .: Permission denied")]),e._v(" "),t("p",[e._v("解决办法：在挂载目录后多加一个--privileged=true参数即可")])]),e._v(" "),t("li",[t("p",[e._v("在CentOS宿主机下新建目录 /opt/docker/redis")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 创建目录")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-p")]),e._v(" /opt/docker/redis\n")])])])]),e._v(" "),t("li",[t("p",[e._v("将一个redis.conf文件模板拷贝进 /opt/docker/redis 目录下")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 将准备好的redis.conf文件放进 /opt/docker/redis 目录下")]),e._v("\n")])])])]),e._v(" "),t("li",[t("p",[e._v("/app/redis目录下修改redis.conf文件")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 3.1 开启redis验证    可选")]),e._v("\nrequirepass "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("123")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 3.2 允许redis外地连接  必须")]),e._v("\n注释掉 "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# bind 127.0.0.1")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 3.3   daemonize no")]),e._v("\n将daemonize yes注释起来或者 daemonize no设置，因为该配置和docker run中-d参数冲突，会导致容器一直启动失败\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 3.4 开启redis数据持久化  appendonly yes  可选")]),e._v("\n")])])]),t("p",[e._v("默认出厂的原始的redis.conf")]),e._v(" "),t("blockquote",[t("p",[e._v("注：直接复制会在 vim 编辑器的最左侧出现一列 # 字符，解决方法是：提前输入 "),t("code",[e._v(":set paste")]),e._v(" 代码，然后进入插入模式，之后才可以将复制的代码粘贴")])]),e._v(" "),t("div",{staticClass:"language-conf extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('# Redis configuration file example.\n#\n# Note that in order to read the configuration file, Redis must be\n# started with the file path as first argument:\n#\n# ./redis-server /path/to/redis.conf\n \n# Note on units: when memory size is needed, it is possible to specify\n# it in the usual form of 1k 5GB 4M and so forth:\n#\n# 1k => 1000 bytes\n# 1kb => 1024 bytes\n# 1m => 1000000 bytes\n# 1mb => 1024*1024 bytes\n# 1g => 1000000000 bytes\n# 1gb => 1024*1024*1024 bytes\n#\n# units are case insensitive so 1GB 1Gb 1gB are all the same.\n \n################################## INCLUDES ###################################\n \n# Include one or more other config files here.  This is useful if you\n# have a standard template that goes to all Redis servers but also need\n# to customize a few per-server settings.  Include files can include\n# other files, so use this wisely.\n#\n# Notice option "include" won\'t be rewritten by command "CONFIG REWRITE"\n# from admin or Redis Sentinel. Since Redis always uses the last processed\n# line as value of a configuration directive, you\'d better put includes\n# at the beginning of this file to avoid overwriting config change at runtime.\n#\n# If instead you are interested in using includes to override configuration\n# options, it is better to use include as the last line.\n#\n# include /path/to/local.conf\n# include /path/to/other.conf\n \n################################## MODULES #####################################\n \n# Load modules at startup. If the server is not able to load modules\n# it will abort. It is possible to use multiple loadmodule directives.\n#\n# loadmodule /path/to/my_module.so\n# loadmodule /path/to/other_module.so\n \n################################## NETWORK #####################################\n \n# By default, if no "bind" configuration directive is specified, Redis listens\n# for connections from all the network interfaces available on the server.\n# It is possible to listen to just one or multiple selected interfaces using\n# the "bind" configuration directive, followed by one or more IP addresses.\n#\n# Examples:\n#\n# bind 192.168.1.100 10.0.0.1\n# bind 127.0.0.1 ::1\n#\n# ~~~ WARNING ~~~ If the computer running Redis is directly exposed to the\n# internet, binding to all the interfaces is dangerous and will expose the\n# instance to everybody on the internet. So by default we uncomment the\n# following bind directive, that will force Redis to listen only into\n# the IPv4 loopback interface address (this means Redis will be able to\n# accept connections only from clients running into the same computer it\n# is running).\n#\n# IF YOU ARE SURE YOU WANT YOUR INSTANCE TO LISTEN TO ALL THE INTERFACES\n# JUST COMMENT THE FOLLOWING LINE.\n# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n#bind 127.0.0.1\n \n# Protected mode is a layer of security protection, in order to avoid that\n# Redis instances left open on the internet are accessed and exploited.\n#\n# When protected mode is on and if:\n#\n# 1) The server is not binding explicitly to a set of addresses using the\n#    "bind" directive.\n# 2) No password is configured.\n#\n# The server only accepts connections from clients connecting from the\n# IPv4 and IPv6 loopback addresses 127.0.0.1 and ::1, and from Unix domain\n# sockets.\n#\n# By default protected mode is enabled. You should disable it only if\n# you are sure you want clients from other hosts to connect to Redis\n# even if no authentication is configured, nor a specific set of interfaces\n# are explicitly listed using the "bind" directive.\nprotected-mode no\n \n# Accept connections on the specified port, default is 6379 (IANA #815344).\n# If port 0 is specified Redis will not listen on a TCP socket.\nport 6379\n \n# TCP listen() backlog.\n#\n# In high requests-per-second environments you need an high backlog in order\n# to avoid slow clients connections issues. Note that the Linux kernel\n# will silently truncate it to the value of /proc/sys/net/core/somaxconn so\n# make sure to raise both the value of somaxconn and tcp_max_syn_backlog\n# in order to get the desired effect.\ntcp-backlog 511\n \n# Unix socket.\n#\n# Specify the path for the Unix socket that will be used to listen for\n# incoming connections. There is no default, so Redis will not listen\n# on a unix socket when not specified.\n#\n# unixsocket /tmp/redis.sock\n# unixsocketperm 700\n \n# Close the connection after a client is idle for N seconds (0 to disable)\ntimeout 0\n \n# TCP keepalive.\n#\n# If non-zero, use SO_KEEPALIVE to send TCP ACKs to clients in absence\n# of communication. This is useful for two reasons:\n#\n# 1) Detect dead peers.\n# 2) Take the connection alive from the point of view of network\n#    equipment in the middle.\n#\n# On Linux, the specified value (in seconds) is the period used to send ACKs.\n# Note that to close the connection the double of the time is needed.\n# On other kernels the period depends on the kernel configuration.\n#\n# A reasonable value for this option is 300 seconds, which is the new\n# Redis default starting with Redis 3.2.1.\ntcp-keepalive 300\n \n################################# GENERAL #####################################\n \n# By default Redis does not run as a daemon. Use \'yes\' if you need it.\n# Note that Redis will write a pid file in /var/run/redis.pid when daemonized.\ndaemonize no\n \n# If you run Redis from upstart or systemd, Redis can interact with your\n# supervision tree. Options:\n#   supervised no      - no supervision interaction\n#   supervised upstart - signal upstart by putting Redis into SIGSTOP mode\n#   supervised systemd - signal systemd by writing READY=1 to $NOTIFY_SOCKET\n#   supervised auto    - detect upstart or systemd method based on\n#                        UPSTART_JOB or NOTIFY_SOCKET environment variables\n# Note: these supervision methods only signal "process is ready."\n#       They do not enable continuous liveness pings back to your supervisor.\nsupervised no\n \n# If a pid file is specified, Redis writes it where specified at startup\n# and removes it at exit.\n#\n# When the server runs non daemonized, no pid file is created if none is\n# specified in the configuration. When the server is daemonized, the pid file\n# is used even if not specified, defaulting to "/var/run/redis.pid".\n#\n# Creating a pid file is best effort: if Redis is not able to create it\n# nothing bad happens, the server will start and run normally.\npidfile /var/run/redis_6379.pid\n \n# Specify the server verbosity level.\n# This can be one of:\n# debug (a lot of information, useful for development/testing)\n# verbose (many rarely useful info, but not a mess like the debug level)\n# notice (moderately verbose, what you want in production probably)\n# warning (only very important / critical messages are logged)\nloglevel notice\n \n# Specify the log file name. Also the empty string can be used to force\n# Redis to log on the standard output. Note that if you use standard\n# output for logging but daemonize, logs will be sent to /dev/null\nlogfile ""\n \n# To enable logging to the system logger, just set \'syslog-enabled\' to yes,\n# and optionally update the other syslog parameters to suit your needs.\n# syslog-enabled no\n \n# Specify the syslog identity.\n# syslog-ident redis\n \n# Specify the syslog facility. Must be USER or between LOCAL0-LOCAL7.\n# syslog-facility local0\n \n# Set the number of databases. The default database is DB 0, you can select\n# a different one on a per-connection basis using SELECT <dbid> where\n# dbid is a number between 0 and \'databases\'-1\ndatabases 16\n \n# By default Redis shows an ASCII art logo only when started to log to the\n# standard output and if the standard output is a TTY. Basically this means\n# that normally a logo is displayed only in interactive sessions.\n#\n# However it is possible to force the pre-4.0 behavior and always show a\n# ASCII art logo in startup logs by setting the following option to yes.\nalways-show-logo yes\n \n################################ SNAPSHOTTING  ################################\n#\n# Save the DB on disk:\n#\n#   save <seconds> <changes>\n#\n#   Will save the DB if both the given number of seconds and the given\n#   number of write operations against the DB occurred.\n#\n#   In the example below the behaviour will be to save:\n#   after 900 sec (15 min) if at least 1 key changed\n#   after 300 sec (5 min) if at least 10 keys changed\n#   after 60 sec if at least 10000 keys changed\n#\n#   Note: you can disable saving completely by commenting out all "save" lines.\n#\n#   It is also possible to remove all the previously configured save\n#   points by adding a save directive with a single empty string argument\n#   like in the following example:\n#\n#   save ""\n \nsave 900 1\nsave 300 10\nsave 60 10000\n \n# By default Redis will stop accepting writes if RDB snapshots are enabled\n# (at least one save point) and the latest background save failed.\n# This will make the user aware (in a hard way) that data is not persisting\n# on disk properly, otherwise chances are that no one will notice and some\n# disaster will happen.\n#\n# If the background saving process will start working again Redis will\n# automatically allow writes again.\n#\n# However if you have setup your proper monitoring of the Redis server\n# and persistence, you may want to disable this feature so that Redis will\n# continue to work as usual even if there are problems with disk,\n# permissions, and so forth.\nstop-writes-on-bgsave-error yes\n \n# Compress string objects using LZF when dump .rdb databases?\n# For default that\'s set to \'yes\' as it\'s almost always a win.\n# If you want to save some CPU in the saving child set it to \'no\' but\n# the dataset will likely be bigger if you have compressible values or keys.\nrdbcompression yes\n \n# Since version 5 of RDB a CRC64 checksum is placed at the end of the file.\n# This makes the format more resistant to corruption but there is a performance\n# hit to pay (around 10%) when saving and loading RDB files, so you can disable it\n# for maximum performances.\n#\n# RDB files created with checksum disabled have a checksum of zero that will\n# tell the loading code to skip the check.\nrdbchecksum yes\n \n# The filename where to dump the DB\ndbfilename dump.rdb\n \n# The working directory.\n#\n# The DB will be written inside this directory, with the filename specified\n# above using the \'dbfilename\' configuration directive.\n#\n# The Append Only File will also be created inside this directory.\n#\n# Note that you must specify a directory here, not a file name.\ndir ./\n \n################################# REPLICATION #################################\n \n# Master-Replica replication. Use replicaof to make a Redis instance a copy of\n# another Redis server. A few things to understand ASAP about Redis replication.\n#\n#   +------------------+      +---------------+\n#   |      Master      | ---\x3e |    Replica    |\n#   | (receive writes) |      |  (exact copy) |\n#   +------------------+      +---------------+\n#\n# 1) Redis replication is asynchronous, but you can configure a master to\n#    stop accepting writes if it appears to be not connected with at least\n#    a given number of replicas.\n# 2) Redis replicas are able to perform a partial resynchronization with the\n#    master if the replication link is lost for a relatively small amount of\n#    time. You may want to configure the replication backlog size (see the next\n#    sections of this file) with a sensible value depending on your needs.\n# 3) Replication is automatic and does not need user intervention. After a\n#    network partition replicas automatically try to reconnect to masters\n#    and resynchronize with them.\n#\n# replicaof <masterip> <masterport>\n \n# If the master is password protected (using the "requirepass" configuration\n# directive below) it is possible to tell the replica to authenticate before\n# starting the replication synchronization process, otherwise the master will\n# refuse the replica request.\n#\n# masterauth <master-password>\n \n# When a replica loses its connection with the master, or when the replication\n# is still in progress, the replica can act in two different ways:\n#\n# 1) if replica-serve-stale-data is set to \'yes\' (the default) the replica will\n#    still reply to client requests, possibly with out of date data, or the\n#    data set may just be empty if this is the first synchronization.\n#\n# 2) if replica-serve-stale-data is set to \'no\' the replica will reply with\n#    an error "SYNC with master in progress" to all the kind of commands\n#    but to INFO, replicaOF, AUTH, PING, SHUTDOWN, REPLCONF, ROLE, CONFIG,\n#    SUBSCRIBE, UNSUBSCRIBE, PSUBSCRIBE, PUNSUBSCRIBE, PUBLISH, PUBSUB,\n#    COMMAND, POST, HOST: and LATENCY.\n#\nreplica-serve-stale-data yes\n \n# You can configure a replica instance to accept writes or not. Writing against\n# a replica instance may be useful to store some ephemeral data (because data\n# written on a replica will be easily deleted after resync with the master) but\n# may also cause problems if clients are writing to it because of a\n# misconfiguration.\n#\n# Since Redis 2.6 by default replicas are read-only.\n#\n# Note: read only replicas are not designed to be exposed to untrusted clients\n# on the internet. It\'s just a protection layer against misuse of the instance.\n# Still a read only replica exports by default all the administrative commands\n# such as CONFIG, DEBUG, and so forth. To a limited extent you can improve\n# security of read only replicas using \'rename-command\' to shadow all the\n# administrative / dangerous commands.\nreplica-read-only yes\n \n# Replication SYNC strategy: disk or socket.\n#\n# -------------------------------------------------------\n# WARNING: DISKLESS REPLICATION IS EXPERIMENTAL CURRENTLY\n# -------------------------------------------------------\n#\n# New replicas and reconnecting replicas that are not able to continue the replication\n# process just receiving differences, need to do what is called a "full\n# synchronization". An RDB file is transmitted from the master to the replicas.\n# The transmission can happen in two different ways:\n#\n# 1) Disk-backed: The Redis master creates a new process that writes the RDB\n#                 file on disk. Later the file is transferred by the parent\n#                 process to the replicas incrementally.\n# 2) Diskless: The Redis master creates a new process that directly writes the\n#              RDB file to replica sockets, without touching the disk at all.\n#\n# With disk-backed replication, while the RDB file is generated, more replicas\n# can be queued and served with the RDB file as soon as the current child producing\n# the RDB file finishes its work. With diskless replication instead once\n# the transfer starts, new replicas arriving will be queued and a new transfer\n# will start when the current one terminates.\n#\n# When diskless replication is used, the master waits a configurable amount of\n# time (in seconds) before starting the transfer in the hope that multiple replicas\n# will arrive and the transfer can be parallelized.\n#\n# With slow disks and fast (large bandwidth) networks, diskless replication\n# works better.\nrepl-diskless-sync no\n \n# When diskless replication is enabled, it is possible to configure the delay\n# the server waits in order to spawn the child that transfers the RDB via socket\n# to the replicas.\n#\n# This is important since once the transfer starts, it is not possible to serve\n# new replicas arriving, that will be queued for the next RDB transfer, so the server\n# waits a delay in order to let more replicas arrive.\n#\n# The delay is specified in seconds, and by default is 5 seconds. To disable\n# it entirely just set it to 0 seconds and the transfer will start ASAP.\nrepl-diskless-sync-delay 5\n \n# Replicas send PINGs to server in a predefined interval. It\'s possible to change\n# this interval with the repl_ping_replica_period option. The default value is 10\n# seconds.\n#\n# repl-ping-replica-period 10\n \n# The following option sets the replication timeout for:\n#\n# 1) Bulk transfer I/O during SYNC, from the point of view of replica.\n# 2) Master timeout from the point of view of replicas (data, pings).\n# 3) Replica timeout from the point of view of masters (REPLCONF ACK pings).\n#\n# It is important to make sure that this value is greater than the value\n# specified for repl-ping-replica-period otherwise a timeout will be detected\n# every time there is low traffic between the master and the replica.\n#\n# repl-timeout 60\n \n# Disable TCP_NODELAY on the replica socket after SYNC?\n#\n# If you select "yes" Redis will use a smaller number of TCP packets and\n# less bandwidth to send data to replicas. But this can add a delay for\n# the data to appear on the replica side, up to 40 milliseconds with\n# Linux kernels using a default configuration.\n#\n# If you select "no" the delay for data to appear on the replica side will\n# be reduced but more bandwidth will be used for replication.\n#\n# By default we optimize for low latency, but in very high traffic conditions\n# or when the master and replicas are many hops away, turning this to "yes" may\n# be a good idea.\nrepl-disable-tcp-nodelay no\n \n# Set the replication backlog size. The backlog is a buffer that accumulates\n# replica data when replicas are disconnected for some time, so that when a replica\n# wants to reconnect again, often a full resync is not needed, but a partial\n# resync is enough, just passing the portion of data the replica missed while\n# disconnected.\n#\n# The bigger the replication backlog, the longer the time the replica can be\n# disconnected and later be able to perform a partial resynchronization.\n#\n# The backlog is only allocated once there is at least a replica connected.\n#\n# repl-backlog-size 1mb\n \n# After a master has no longer connected replicas for some time, the backlog\n# will be freed. The following option configures the amount of seconds that\n# need to elapse, starting from the time the last replica disconnected, for\n# the backlog buffer to be freed.\n#\n# Note that replicas never free the backlog for timeout, since they may be\n# promoted to masters later, and should be able to correctly "partially\n# resynchronize" with the replicas: hence they should always accumulate backlog.\n#\n# A value of 0 means to never release the backlog.\n#\n# repl-backlog-ttl 3600\n \n# The replica priority is an integer number published by Redis in the INFO output.\n# It is used by Redis Sentinel in order to select a replica to promote into a\n# master if the master is no longer working correctly.\n#\n# A replica with a low priority number is considered better for promotion, so\n# for instance if there are three replicas with priority 10, 100, 25 Sentinel will\n# pick the one with priority 10, that is the lowest.\n#\n# However a special priority of 0 marks the replica as not able to perform the\n# role of master, so a replica with priority of 0 will never be selected by\n# Redis Sentinel for promotion.\n#\n# By default the priority is 100.\nreplica-priority 100\n \n# It is possible for a master to stop accepting writes if there are less than\n# N replicas connected, having a lag less or equal than M seconds.\n#\n# The N replicas need to be in "online" state.\n#\n# The lag in seconds, that must be <= the specified value, is calculated from\n# the last ping received from the replica, that is usually sent every second.\n#\n# This option does not GUARANTEE that N replicas will accept the write, but\n# will limit the window of exposure for lost writes in case not enough replicas\n# are available, to the specified number of seconds.\n#\n# For example to require at least 3 replicas with a lag <= 10 seconds use:\n#\n# min-replicas-to-write 3\n# min-replicas-max-lag 10\n#\n# Setting one or the other to 0 disables the feature.\n#\n# By default min-replicas-to-write is set to 0 (feature disabled) and\n# min-replicas-max-lag is set to 10.\n \n# A Redis master is able to list the address and port of the attached\n# replicas in different ways. For example the "INFO replication" section\n# offers this information, which is used, among other tools, by\n# Redis Sentinel in order to discover replica instances.\n# Another place where this info is available is in the output of the\n# "ROLE" command of a master.\n#\n# The listed IP and address normally reported by a replica is obtained\n# in the following way:\n#\n#   IP: The address is auto detected by checking the peer address\n#   of the socket used by the replica to connect with the master.\n#\n#   Port: The port is communicated by the replica during the replication\n#   handshake, and is normally the port that the replica is using to\n#   listen for connections.\n#\n# However when port forwarding or Network Address Translation (NAT) is\n# used, the replica may be actually reachable via different IP and port\n# pairs. The following two options can be used by a replica in order to\n# report to its master a specific set of IP and port, so that both INFO\n# and ROLE will report those values.\n#\n# There is no need to use both the options if you need to override just\n# the port or the IP address.\n#\n# replica-announce-ip 5.5.5.5\n# replica-announce-port 1234\n \n################################## SECURITY ###################################\n \n# Require clients to issue AUTH <PASSWORD> before processing any other\n# commands.  This might be useful in environments in which you do not trust\n# others with access to the host running redis-server.\n#\n# This should stay commented out for backward compatibility and because most\n# people do not need auth (e.g. they run their own servers).\n#\n# Warning: since Redis is pretty fast an outside user can try up to\n# 150k passwords per second against a good box. This means that you should\n# use a very strong password otherwise it will be very easy to break.\n#\n# requirepass foobared\n \n# Command renaming.\n#\n# It is possible to change the name of dangerous commands in a shared\n# environment. For instance the CONFIG command may be renamed into something\n# hard to guess so that it will still be available for internal-use tools\n# but not available for general clients.\n#\n# Example:\n#\n# rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52\n#\n# It is also possible to completely kill a command by renaming it into\n# an empty string:\n#\n# rename-command CONFIG ""\n#\n# Please note that changing the name of commands that are logged into the\n# AOF file or transmitted to replicas may cause problems.\n \n################################### CLIENTS ####################################\n \n# Set the max number of connected clients at the same time. By default\n# this limit is set to 10000 clients, however if the Redis server is not\n# able to configure the process file limit to allow for the specified limit\n# the max number of allowed clients is set to the current file limit\n# minus 32 (as Redis reserves a few file descriptors for internal uses).\n#\n# Once the limit is reached Redis will close all the new connections sending\n# an error \'max number of clients reached\'.\n#\n# maxclients 10000\n \n############################## MEMORY MANAGEMENT ################################\n \n# Set a memory usage limit to the specified amount of bytes.\n# When the memory limit is reached Redis will try to remove keys\n# according to the eviction policy selected (see maxmemory-policy).\n#\n# If Redis can\'t remove keys according to the policy, or if the policy is\n# set to \'noeviction\', Redis will start to reply with errors to commands\n# that would use more memory, like SET, LPUSH, and so on, and will continue\n# to reply to read-only commands like GET.\n#\n# This option is usually useful when using Redis as an LRU or LFU cache, or to\n# set a hard memory limit for an instance (using the \'noeviction\' policy).\n#\n# WARNING: If you have replicas attached to an instance with maxmemory on,\n# the size of the output buffers needed to feed the replicas are subtracted\n# from the used memory count, so that network problems / resyncs will\n# not trigger a loop where keys are evicted, and in turn the output\n# buffer of replicas is full with DELs of keys evicted triggering the deletion\n# of more keys, and so forth until the database is completely emptied.\n#\n# In short... if you have replicas attached it is suggested that you set a lower\n# limit for maxmemory so that there is some free RAM on the system for replica\n# output buffers (but this is not needed if the policy is \'noeviction\').\n#\n# maxmemory <bytes>\n \n# MAXMEMORY POLICY: how Redis will select what to remove when maxmemory\n# is reached. You can select among five behaviors:\n#\n# volatile-lru -> Evict using approximated LRU among the keys with an expire set.\n# allkeys-lru -> Evict any key using approximated LRU.\n# volatile-lfu -> Evict using approximated LFU among the keys with an expire set.\n# allkeys-lfu -> Evict any key using approximated LFU.\n# volatile-random -> Remove a random key among the ones with an expire set.\n# allkeys-random -> Remove a random key, any key.\n# volatile-ttl -> Remove the key with the nearest expire time (minor TTL)\n# noeviction -> Don\'t evict anything, just return an error on write operations.\n#\n# LRU means Least Recently Used\n# LFU means Least Frequently Used\n#\n# Both LRU, LFU and volatile-ttl are implemented using approximated\n# randomized algorithms.\n#\n# Note: with any of the above policies, Redis will return an error on write\n#       operations, when there are no suitable keys for eviction.\n#\n#       At the date of writing these commands are: set setnx setex append\n#       incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd\n#       sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby\n#       zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby\n#       getset mset msetnx exec sort\n#\n# The default is:\n#\n# maxmemory-policy noeviction\n \n# LRU, LFU and minimal TTL algorithms are not precise algorithms but approximated\n# algorithms (in order to save memory), so you can tune it for speed or\n# accuracy. For default Redis will check five keys and pick the one that was\n# used less recently, you can change the sample size using the following\n# configuration directive.\n#\n# The default of 5 produces good enough results. 10 Approximates very closely\n# true LRU but costs more CPU. 3 is faster but not very accurate.\n#\n# maxmemory-samples 5\n \n# Starting from Redis 5, by default a replica will ignore its maxmemory setting\n# (unless it is promoted to master after a failover or manually). It means\n# that the eviction of keys will be just handled by the master, sending the\n# DEL commands to the replica as keys evict in the master side.\n#\n# This behavior ensures that masters and replicas stay consistent, and is usually\n# what you want, however if your replica is writable, or you want the replica to have\n# a different memory setting, and you are sure all the writes performed to the\n# replica are idempotent, then you may change this default (but be sure to understand\n# what you are doing).\n#\n# Note that since the replica by default does not evict, it may end using more\n# memory than the one set via maxmemory (there are certain buffers that may\n# be larger on the replica, or data structures may sometimes take more memory and so\n# forth). So make sure you monitor your replicas and make sure they have enough\n# memory to never hit a real out-of-memory condition before the master hits\n# the configured maxmemory setting.\n#\n# replica-ignore-maxmemory yes\n \n############################# LAZY FREEING ####################################\n \n# Redis has two primitives to delete keys. One is called DEL and is a blocking\n# deletion of the object. It means that the server stops processing new commands\n# in order to reclaim all the memory associated with an object in a synchronous\n# way. If the key deleted is associated with a small object, the time needed\n# in order to execute the DEL command is very small and comparable to most other\n# O(1) or O(log_N) commands in Redis. However if the key is associated with an\n# aggregated value containing millions of elements, the server can block for\n# a long time (even seconds) in order to complete the operation.\n#\n# For the above reasons Redis also offers non blocking deletion primitives\n# such as UNLINK (non blocking DEL) and the ASYNC option of FLUSHALL and\n# FLUSHDB commands, in order to reclaim memory in background. Those commands\n# are executed in constant time. Another thread will incrementally free the\n# object in the background as fast as possible.\n#\n# DEL, UNLINK and ASYNC option of FLUSHALL and FLUSHDB are user-controlled.\n# It\'s up to the design of the application to understand when it is a good\n# idea to use one or the other. However the Redis server sometimes has to\n# delete keys or flush the whole database as a side effect of other operations.\n# Specifically Redis deletes objects independently of a user call in the\n# following scenarios:\n#\n# 1) On eviction, because of the maxmemory and maxmemory policy configurations,\n#    in order to make room for new data, without going over the specified\n#    memory limit.\n# 2) Because of expire: when a key with an associated time to live (see the\n#    EXPIRE command) must be deleted from memory.\n# 3) Because of a side effect of a command that stores data on a key that may\n#    already exist. For example the RENAME command may delete the old key\n#    content when it is replaced with another one. Similarly SUNIONSTORE\n#    or SORT with STORE option may delete existing keys. The SET command\n#    itself removes any old content of the specified key in order to replace\n#    it with the specified string.\n# 4) During replication, when a replica performs a full resynchronization with\n#    its master, the content of the whole database is removed in order to\n#    load the RDB file just transferred.\n#\n# In all the above cases the default is to delete objects in a blocking way,\n# like if DEL was called. However you can configure each case specifically\n# in order to instead release memory in a non-blocking way like if UNLINK\n# was called, using the following configuration directives:\n \nlazyfree-lazy-eviction no\nlazyfree-lazy-expire no\nlazyfree-lazy-server-del no\nreplica-lazy-flush no\n \n############################## APPEND ONLY MODE ###############################\n \n# By default Redis asynchronously dumps the dataset on disk. This mode is\n# good enough in many applications, but an issue with the Redis process or\n# a power outage may result into a few minutes of writes lost (depending on\n# the configured save points).\n#\n# The Append Only File is an alternative persistence mode that provides\n# much better durability. For instance using the default data fsync policy\n# (see later in the config file) Redis can lose just one second of writes in a\n# dramatic event like a server power outage, or a single write if something\n# wrong with the Redis process itself happens, but the operating system is\n# still running correctly.\n#\n# AOF and RDB persistence can be enabled at the same time without problems.\n# If the AOF is enabled on startup Redis will load the AOF, that is the file\n# with the better durability guarantees.\n#\n# Please check http://redis.io/topics/persistence for more information.\n \nappendonly yes\n \n# The name of the append only file (default: "appendonly.aof")\n \nappendfilename "appendonly.aof"\n \n# The fsync() call tells the Operating System to actually write data on disk\n# instead of waiting for more data in the output buffer. Some OS will really flush\n# data on disk, some other OS will just try to do it ASAP.\n#\n# Redis supports three different modes:\n#\n# no: don\'t fsync, just let the OS flush the data when it wants. Faster.\n# always: fsync after every write to the append only log. Slow, Safest.\n# everysec: fsync only one time every second. Compromise.\n#\n# The default is "everysec", as that\'s usually the right compromise between\n# speed and data safety. It\'s up to you to understand if you can relax this to\n# "no" that will let the operating system flush the output buffer when\n# it wants, for better performances (but if you can live with the idea of\n# some data loss consider the default persistence mode that\'s snapshotting),\n# or on the contrary, use "always" that\'s very slow but a bit safer than\n# everysec.\n#\n# More details please check the following article:\n# http://antirez.com/post/redis-persistence-demystified.html\n#\n# If unsure, use "everysec".\n \n# appendfsync always\nappendfsync everysec\n# appendfsync no\n \n# When the AOF fsync policy is set to always or everysec, and a background\n# saving process (a background save or AOF log background rewriting) is\n# performing a lot of I/O against the disk, in some Linux configurations\n# Redis may block too long on the fsync() call. Note that there is no fix for\n# this currently, as even performing fsync in a different thread will block\n# our synchronous write(2) call.\n#\n# In order to mitigate this problem it\'s possible to use the following option\n# that will prevent fsync() from being called in the main process while a\n# BGSAVE or BGREWRITEAOF is in progress.\n#\n# This means that while another child is saving, the durability of Redis is\n# the same as "appendfsync none". In practical terms, this means that it is\n# possible to lose up to 30 seconds of log in the worst scenario (with the\n# default Linux settings).\n#\n# If you have latency problems turn this to "yes". Otherwise leave it as\n# "no" that is the safest pick from the point of view of durability.\n \nno-appendfsync-on-rewrite no\n \n# Automatic rewrite of the append only file.\n# Redis is able to automatically rewrite the log file implicitly calling\n# BGREWRITEAOF when the AOF log size grows by the specified percentage.\n#\n# This is how it works: Redis remembers the size of the AOF file after the\n# latest rewrite (if no rewrite has happened since the restart, the size of\n# the AOF at startup is used).\n#\n# This base size is compared to the current size. If the current size is\n# bigger than the specified percentage, the rewrite is triggered. Also\n# you need to specify a minimal size for the AOF file to be rewritten, this\n# is useful to avoid rewriting the AOF file even if the percentage increase\n# is reached but it is still pretty small.\n#\n# Specify a percentage of zero in order to disable the automatic AOF\n# rewrite feature.\n \nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\n \n# An AOF file may be found to be truncated at the end during the Redis\n# startup process, when the AOF data gets loaded back into memory.\n# This may happen when the system where Redis is running\n# crashes, especially when an ext4 filesystem is mounted without the\n# data=ordered option (however this can\'t happen when Redis itself\n# crashes or aborts but the operating system still works correctly).\n#\n# Redis can either exit with an error when this happens, or load as much\n# data as possible (the default now) and start if the AOF file is found\n# to be truncated at the end. The following option controls this behavior.\n#\n# If aof-load-truncated is set to yes, a truncated AOF file is loaded and\n# the Redis server starts emitting a log to inform the user of the event.\n# Otherwise if the option is set to no, the server aborts with an error\n# and refuses to start. When the option is set to no, the user requires\n# to fix the AOF file using the "redis-check-aof" utility before to restart\n# the server.\n#\n# Note that if the AOF file will be found to be corrupted in the middle\n# the server will still exit with an error. This option only applies when\n# Redis will try to read more data from the AOF file but not enough bytes\n# will be found.\naof-load-truncated yes\n \n# When rewriting the AOF file, Redis is able to use an RDB preamble in the\n# AOF file for faster rewrites and recoveries. When this option is turned\n# on the rewritten AOF file is composed of two different stanzas:\n#\n#   [RDB file][AOF tail]\n#\n# When loading Redis recognizes that the AOF file starts with the "REDIS"\n# string and loads the prefixed RDB file, and continues loading the AOF\n# tail.\naof-use-rdb-preamble yes\n \n################################ LUA SCRIPTING  ###############################\n \n# Max execution time of a Lua script in milliseconds.\n#\n# If the maximum execution time is reached Redis will log that a script is\n# still in execution after the maximum allowed time and will start to\n# reply to queries with an error.\n#\n# When a long running script exceeds the maximum execution time only the\n# SCRIPT KILL and SHUTDOWN NOSAVE commands are available. The first can be\n# used to stop a script that did not yet called write commands. The second\n# is the only way to shut down the server in the case a write command was\n# already issued by the script but the user doesn\'t want to wait for the natural\n# termination of the script.\n#\n# Set it to 0 or a negative value for unlimited execution without warnings.\nlua-time-limit 5000\n \n################################ REDIS CLUSTER  ###############################\n \n# Normal Redis instances can\'t be part of a Redis Cluster; only nodes that are\n# started as cluster nodes can. In order to start a Redis instance as a\n# cluster node enable the cluster support uncommenting the following:\n#\n# cluster-enabled yes\n \n# Every cluster node has a cluster configuration file. This file is not\n# intended to be edited by hand. It is created and updated by Redis nodes.\n# Every Redis Cluster node requires a different cluster configuration file.\n# Make sure that instances running in the same system do not have\n# overlapping cluster configuration file names.\n#\n# cluster-config-file nodes-6379.conf\n \n# Cluster node timeout is the amount of milliseconds a node must be unreachable\n# for it to be considered in failure state.\n# Most other internal time limits are multiple of the node timeout.\n#\n# cluster-node-timeout 15000\n \n# A replica of a failing master will avoid to start a failover if its data\n# looks too old.\n#\n# There is no simple way for a replica to actually have an exact measure of\n# its "data age", so the following two checks are performed:\n#\n# 1) If there are multiple replicas able to failover, they exchange messages\n#    in order to try to give an advantage to the replica with the best\n#    replication offset (more data from the master processed).\n#    Replicas will try to get their rank by offset, and apply to the start\n#    of the failover a delay proportional to their rank.\n#\n# 2) Every single replica computes the time of the last interaction with\n#    its master. This can be the last ping or command received (if the master\n#    is still in the "connected" state), or the time that elapsed since the\n#    disconnection with the master (if the replication link is currently down).\n#    If the last interaction is too old, the replica will not try to failover\n#    at all.\n#\n# The point "2" can be tuned by user. Specifically a replica will not perform\n# the failover if, since the last interaction with the master, the time\n# elapsed is greater than:\n#\n#   (node-timeout * replica-validity-factor) + repl-ping-replica-period\n#\n# So for example if node-timeout is 30 seconds, and the replica-validity-factor\n# is 10, and assuming a default repl-ping-replica-period of 10 seconds, the\n# replica will not try to failover if it was not able to talk with the master\n# for longer than 310 seconds.\n#\n# A large replica-validity-factor may allow replicas with too old data to failover\n# a master, while a too small value may prevent the cluster from being able to\n# elect a replica at all.\n#\n# For maximum availability, it is possible to set the replica-validity-factor\n# to a value of 0, which means, that replicas will always try to failover the\n# master regardless of the last time they interacted with the master.\n# (However they\'ll always try to apply a delay proportional to their\n# offset rank).\n#\n# Zero is the only value able to guarantee that when all the partitions heal\n# the cluster will always be able to continue.\n#\n# cluster-replica-validity-factor 10\n \n# Cluster replicas are able to migrate to orphaned masters, that are masters\n# that are left without working replicas. This improves the cluster ability\n# to resist to failures as otherwise an orphaned master can\'t be failed over\n# in case of failure if it has no working replicas.\n#\n# Replicas migrate to orphaned masters only if there are still at least a\n# given number of other working replicas for their old master. This number\n# is the "migration barrier". A migration barrier of 1 means that a replica\n# will migrate only if there is at least 1 other working replica for its master\n# and so forth. It usually reflects the number of replicas you want for every\n# master in your cluster.\n#\n# Default is 1 (replicas migrate only if their masters remain with at least\n# one replica). To disable migration just set it to a very large value.\n# A value of 0 can be set but is useful only for debugging and dangerous\n# in production.\n#\n# cluster-migration-barrier 1\n \n# By default Redis Cluster nodes stop accepting queries if they detect there\n# is at least an hash slot uncovered (no available node is serving it).\n# This way if the cluster is partially down (for example a range of hash slots\n# are no longer covered) all the cluster becomes, eventually, unavailable.\n# It automatically returns available as soon as all the slots are covered again.\n#\n# However sometimes you want the subset of the cluster which is working,\n# to continue to accept queries for the part of the key space that is still\n# covered. In order to do so, just set the cluster-require-full-coverage\n# option to no.\n#\n# cluster-require-full-coverage yes\n \n# This option, when set to yes, prevents replicas from trying to failover its\n# master during master failures. However the master can still perform a\n# manual failover, if forced to do so.\n#\n# This is useful in different scenarios, especially in the case of multiple\n# data center operations, where we want one side to never be promoted if not\n# in the case of a total DC failure.\n#\n# cluster-replica-no-failover no\n \n# In order to setup your cluster make sure to read the documentation\n# available at http://redis.io web site.\n \n########################## CLUSTER DOCKER/NAT support  ########################\n \n# In certain deployments, Redis Cluster nodes address discovery fails, because\n# addresses are NAT-ted or because ports are forwarded (the typical case is\n# Docker and other containers).\n#\n# In order to make Redis Cluster working in such environments, a static\n# configuration where each node knows its public address is needed. The\n# following two options are used for this scope, and are:\n#\n# * cluster-announce-ip\n# * cluster-announce-port\n# * cluster-announce-bus-port\n#\n# Each instruct the node about its address, client port, and cluster message\n# bus port. The information is then published in the header of the bus packets\n# so that other nodes will be able to correctly map the address of the node\n# publishing the information.\n#\n# If the above options are not used, the normal Redis Cluster auto-detection\n# will be used instead.\n#\n# Note that when remapped, the bus port may not be at the fixed offset of\n# clients port + 10000, so you can specify any port and bus-port depending\n# on how they get remapped. If the bus-port is not set, a fixed offset of\n# 10000 will be used as usually.\n#\n# Example:\n#\n# cluster-announce-ip 10.1.1.5\n# cluster-announce-port 6379\n# cluster-announce-bus-port 6380\n \n################################## SLOW LOG ###################################\n \n# The Redis Slow Log is a system to log queries that exceeded a specified\n# execution time. The execution time does not include the I/O operations\n# like talking with the client, sending the reply and so forth,\n# but just the time needed to actually execute the command (this is the only\n# stage of command execution where the thread is blocked and can not serve\n# other requests in the meantime).\n#\n# You can configure the slow log with two parameters: one tells Redis\n# what is the execution time, in microseconds, to exceed in order for the\n# command to get logged, and the other parameter is the length of the\n# slow log. When a new command is logged the oldest one is removed from the\n# queue of logged commands.\n \n# The following time is expressed in microseconds, so 1000000 is equivalent\n# to one second. Note that a negative number disables the slow log, while\n# a value of zero forces the logging of every command.\nslowlog-log-slower-than 10000\n \n# There is no limit to this length. Just be aware that it will consume memory.\n# You can reclaim memory used by the slow log with SLOWLOG RESET.\nslowlog-max-len 128\n \n################################ LATENCY MONITOR ##############################\n \n# The Redis latency monitoring subsystem samples different operations\n# at runtime in order to collect data related to possible sources of\n# latency of a Redis instance.\n#\n# Via the LATENCY command this information is available to the user that can\n# print graphs and obtain reports.\n#\n# The system only logs operations that were performed in a time equal or\n# greater than the amount of milliseconds specified via the\n# latency-monitor-threshold configuration directive. When its value is set\n# to zero, the latency monitor is turned off.\n#\n# By default latency monitoring is disabled since it is mostly not needed\n# if you don\'t have latency issues, and collecting data has a performance\n# impact, that while very small, can be measured under big load. Latency\n# monitoring can easily be enabled at runtime using the command\n# "CONFIG SET latency-monitor-threshold <milliseconds>" if needed.\nlatency-monitor-threshold 0\n \n############################# EVENT NOTIFICATION ##############################\n \n# Redis can notify Pub/Sub clients about events happening in the key space.\n# This feature is documented at http://redis.io/topics/notifications\n#\n# For instance if keyspace events notification is enabled, and a client\n# performs a DEL operation on key "foo" stored in the Database 0, two\n# messages will be published via Pub/Sub:\n#\n# PUBLISH __keyspace@0__:foo del\n# PUBLISH __keyevent@0__:del foo\n#\n# It is possible to select the events that Redis will notify among a set\n# of classes. Every class is identified by a single character:\n#\n#  K     Keyspace events, published with __keyspace@<db>__ prefix.\n#  E     Keyevent events, published with __keyevent@<db>__ prefix.\n#  g     Generic commands (non-type specific) like DEL, EXPIRE, RENAME, ...\n#  $     String commands\n#  l     List commands\n#  s     Set commands\n#  h     Hash commands\n#  z     Sorted set commands\n#  x     Expired events (events generated every time a key expires)\n#  e     Evicted events (events generated when a key is evicted for maxmemory)\n#  A     Alias for g$lshzxe, so that the "AKE" string means all the events.\n#\n#  The "notify-keyspace-events" takes as argument a string that is composed\n#  of zero or multiple characters. The empty string means that notifications\n#  are disabled.\n#\n#  Example: to enable list and generic events, from the point of view of the\n#           event name, use:\n#\n#  notify-keyspace-events Elg\n#\n#  Example 2: to get the stream of the expired keys subscribing to channel\n#             name __keyevent@0__:expired use:\n#\n  notify-keyspace-events Ex\n#\n#  By default all notifications are disabled because most users don\'t need\n#  this feature and the feature has some overhead. Note that if you don\'t\n#  specify at least one of K or E, no events will be delivered.\n#notify-keyspace-events ""\n \n############################### ADVANCED CONFIG ###############################\n \n# Hashes are encoded using a memory efficient data structure when they have a\n# small number of entries, and the biggest entry does not exceed a given\n# threshold. These thresholds can be configured using the following directives.\nhash-max-ziplist-entries 512\nhash-max-ziplist-value 64\n \n# Lists are also encoded in a special way to save a lot of space.\n# The number of entries allowed per internal list node can be specified\n# as a fixed maximum size or a maximum number of elements.\n# For a fixed maximum size, use -5 through -1, meaning:\n# -5: max size: 64 Kb  <-- not recommended for normal workloads\n# -4: max size: 32 Kb  <-- not recommended\n# -3: max size: 16 Kb  <-- probably not recommended\n# -2: max size: 8 Kb   <-- good\n# -1: max size: 4 Kb   <-- good\n# Positive numbers mean store up to _exactly_ that number of elements\n# per list node.\n# The highest performing option is usually -2 (8 Kb size) or -1 (4 Kb size),\n# but if your use case is unique, adjust the settings as necessary.\nlist-max-ziplist-size -2\n \n# Lists may also be compressed.\n# Compress depth is the number of quicklist ziplist nodes from *each* side of\n# the list to *exclude* from compression.  The head and tail of the list\n# are always uncompressed for fast push/pop operations.  Settings are:\n# 0: disable all list compression\n# 1: depth 1 means "don\'t start compressing until after 1 node into the list,\n#    going from either the head or tail"\n#    So: [head]->node->node->...->node->[tail]\n#    [head], [tail] will always be uncompressed; inner nodes will compress.\n# 2: [head]->[next]->node->node->...->node->[prev]->[tail]\n#    2 here means: don\'t compress head or head->next or tail->prev or tail,\n#    but compress all nodes between them.\n# 3: [head]->[next]->[next]->node->node->...->node->[prev]->[prev]->[tail]\n# etc.\nlist-compress-depth 0\n \n# Sets have a special encoding in just one case: when a set is composed\n# of just strings that happen to be integers in radix 10 in the range\n# of 64 bit signed integers.\n# The following configuration setting sets the limit in the size of the\n# set in order to use this special memory saving encoding.\nset-max-intset-entries 512\n \n# Similarly to hashes and lists, sorted sets are also specially encoded in\n# order to save a lot of space. This encoding is only used when the length and\n# elements of a sorted set are below the following limits:\nzset-max-ziplist-entries 128\nzset-max-ziplist-value 64\n \n# HyperLogLog sparse representation bytes limit. The limit includes the\n# 16 bytes header. When an HyperLogLog using the sparse representation crosses\n# this limit, it is converted into the dense representation.\n#\n# A value greater than 16000 is totally useless, since at that point the\n# dense representation is more memory efficient.\n#\n# The suggested value is ~ 3000 in order to have the benefits of\n# the space efficient encoding without slowing down too much PFADD,\n# which is O(N) with the sparse encoding. The value can be raised to\n# ~ 10000 when CPU is not a concern, but space is, and the data set is\n# composed of many HyperLogLogs with cardinality in the 0 - 15000 range.\nhll-sparse-max-bytes 3000\n \n# Streams macro node max size / items. The stream data structure is a radix\n# tree of big nodes that encode multiple items inside. Using this configuration\n# it is possible to configure how big a single node can be in bytes, and the\n# maximum number of items it may contain before switching to a new node when\n# appending new stream entries. If any of the following settings are set to\n# zero, the limit is ignored, so for instance it is possible to set just a\n# max entires limit by setting max-bytes to 0 and max-entries to the desired\n# value.\nstream-node-max-bytes 4096\nstream-node-max-entries 100\n \n# Active rehashing uses 1 millisecond every 100 milliseconds of CPU time in\n# order to help rehashing the main Redis hash table (the one mapping top-level\n# keys to values). The hash table implementation Redis uses (see dict.c)\n# performs a lazy rehashing: the more operation you run into a hash table\n# that is rehashing, the more rehashing "steps" are performed, so if the\n# server is idle the rehashing is never complete and some more memory is used\n# by the hash table.\n#\n# The default is to use this millisecond 10 times every second in order to\n# actively rehash the main dictionaries, freeing memory when possible.\n#\n# If unsure:\n# use "activerehashing no" if you have hard latency requirements and it is\n# not a good thing in your environment that Redis can reply from time to time\n# to queries with 2 milliseconds delay.\n#\n# use "activerehashing yes" if you don\'t have such hard requirements but\n# want to free memory asap when possible.\nactiverehashing yes\n \n# The client output buffer limits can be used to force disconnection of clients\n# that are not reading data from the server fast enough for some reason (a\n# common reason is that a Pub/Sub client can\'t consume messages as fast as the\n# publisher can produce them).\n#\n# The limit can be set differently for the three different classes of clients:\n#\n# normal -> normal clients including MONITOR clients\n# replica  -> replica clients\n# pubsub -> clients subscribed to at least one pubsub channel or pattern\n#\n# The syntax of every client-output-buffer-limit directive is the following:\n#\n# client-output-buffer-limit <class> <hard limit> <soft limit> <soft seconds>\n#\n# A client is immediately disconnected once the hard limit is reached, or if\n# the soft limit is reached and remains reached for the specified number of\n# seconds (continuously).\n# So for instance if the hard limit is 32 megabytes and the soft limit is\n# 16 megabytes / 10 seconds, the client will get disconnected immediately\n# if the size of the output buffers reach 32 megabytes, but will also get\n# disconnected if the client reaches 16 megabytes and continuously overcomes\n# the limit for 10 seconds.\n#\n# By default normal clients are not limited because they don\'t receive data\n# without asking (in a push way), but just after a request, so only\n# asynchronous clients may create a scenario where data is requested faster\n# than it can read.\n#\n# Instead there is a default limit for pubsub and replica clients, since\n# subscribers and replicas receive data in a push fashion.\n#\n# Both the hard or the soft limit can be disabled by setting them to zero.\nclient-output-buffer-limit normal 0 0 0\nclient-output-buffer-limit replica 256mb 64mb 60\nclient-output-buffer-limit pubsub 32mb 8mb 60\n \n# Client query buffers accumulate new commands. They are limited to a fixed\n# amount by default in order to avoid that a protocol desynchronization (for\n# instance due to a bug in the client) will lead to unbound memory usage in\n# the query buffer. However you can configure it here if you have very special\n# needs, such us huge multi/exec requests or alike.\n#\n# client-query-buffer-limit 1gb\n \n# In the Redis protocol, bulk requests, that are, elements representing single\n# strings, are normally limited ot 512 mb. However you can change this limit\n# here.\n#\n# proto-max-bulk-len 512mb\n \n# Redis calls an internal function to perform many background tasks, like\n# closing connections of clients in timeout, purging expired keys that are\n# never requested, and so forth.\n#\n# Not all tasks are performed with the same frequency, but Redis checks for\n# tasks to perform according to the specified "hz" value.\n#\n# By default "hz" is set to 10. Raising the value will use more CPU when\n# Redis is idle, but at the same time will make Redis more responsive when\n# there are many keys expiring at the same time, and timeouts may be\n# handled with more precision.\n#\n# The range is between 1 and 500, however a value over 100 is usually not\n# a good idea. Most users should use the default of 10 and raise this up to\n# 100 only in environments where very low latency is required.\nhz 10\n \n# Normally it is useful to have an HZ value which is proportional to the\n# number of clients connected. This is useful in order, for instance, to\n# avoid too many clients are processed for each background task invocation\n# in order to avoid latency spikes.\n#\n# Since the default HZ value by default is conservatively set to 10, Redis\n# offers, and enables by default, the ability to use an adaptive HZ value\n# which will temporary raise when there are many connected clients.\n#\n# When dynamic HZ is enabled, the actual configured HZ will be used as\n# as a baseline, but multiples of the configured HZ value will be actually\n# used as needed once more clients are connected. In this way an idle\n# instance will use very little CPU time while a busy instance will be\n# more responsive.\ndynamic-hz yes\n \n# When a child rewrites the AOF file, if the following option is enabled\n# the file will be fsync-ed every 32 MB of data generated. This is useful\n# in order to commit the file to the disk more incrementally and avoid\n# big latency spikes.\naof-rewrite-incremental-fsync yes\n \n# When redis saves RDB file, if the following option is enabled\n# the file will be fsync-ed every 32 MB of data generated. This is useful\n# in order to commit the file to the disk more incrementally and avoid\n# big latency spikes.\nrdb-save-incremental-fsync yes\n \n# Redis LFU eviction (see maxmemory setting) can be tuned. However it is a good\n# idea to start with the default settings and only change them after investigating\n# how to improve the performances and how the keys LFU change over time, which\n# is possible to inspect via the OBJECT FREQ command.\n#\n# There are two tunable parameters in the Redis LFU implementation: the\n# counter logarithm factor and the counter decay time. It is important to\n# understand what the two parameters mean before changing them.\n#\n# The LFU counter is just 8 bits per key, it\'s maximum value is 255, so Redis\n# uses a probabilistic increment with logarithmic behavior. Given the value\n# of the old counter, when a key is accessed, the counter is incremented in\n# this way:\n#\n# 1. A random number R between 0 and 1 is extracted.\n# 2. A probability P is calculated as 1/(old_value*lfu_log_factor+1).\n# 3. The counter is incremented only if R < P.\n#\n# The default lfu-log-factor is 10. This is a table of how the frequency\n# counter changes with a different number of accesses with different\n# logarithmic factors:\n#\n# +--------+------------+------------+------------+------------+------------+\n# | factor | 100 hits   | 1000 hits  | 100K hits  | 1M hits    | 10M hits   |\n# +--------+------------+------------+------------+------------+------------+\n# | 0      | 104        | 255        | 255        | 255        | 255        |\n# +--------+------------+------------+------------+------------+------------+\n# | 1      | 18         | 49         | 255        | 255        | 255        |\n# +--------+------------+------------+------------+------------+------------+\n# | 10     | 10         | 18         | 142        | 255        | 255        |\n# +--------+------------+------------+------------+------------+------------+\n# | 100    | 8          | 11         | 49         | 143        | 255        |\n# +--------+------------+------------+------------+------------+------------+\n#\n# NOTE: The above table was obtained by running the following commands:\n#\n#   redis-benchmark -n 1000000 incr foo\n#   redis-cli object freq foo\n#\n# NOTE 2: The counter initial value is 5 in order to give new objects a chance\n# to accumulate hits.\n#\n# The counter decay time is the time, in minutes, that must elapse in order\n# for the key counter to be divided by two (or decremented if it has a value\n# less <= 10).\n#\n# The default value for the lfu-decay-time is 1. A Special value of 0 means to\n# decay the counter every time it happens to be scanned.\n#\n# lfu-log-factor 10\n# lfu-decay-time 1\n \n########################### ACTIVE DEFRAGMENTATION #######################\n#\n# WARNING THIS FEATURE IS EXPERIMENTAL. However it was stress tested\n# even in production and manually tested by multiple engineers for some\n# time.\n#\n# What is active defragmentation?\n# -------------------------------\n#\n# Active (online) defragmentation allows a Redis server to compact the\n# spaces left between small allocations and deallocations of data in memory,\n# thus allowing to reclaim back memory.\n#\n# Fragmentation is a natural process that happens with every allocator (but\n# less so with Jemalloc, fortunately) and certain workloads. Normally a server\n# restart is needed in order to lower the fragmentation, or at least to flush\n# away all the data and create it again. However thanks to this feature\n# implemented by Oran Agra for Redis 4.0 this process can happen at runtime\n# in an "hot" way, while the server is running.\n#\n# Basically when the fragmentation is over a certain level (see the\n# configuration options below) Redis will start to create new copies of the\n# values in contiguous memory regions by exploiting certain specific Jemalloc\n# features (in order to understand if an allocation is causing fragmentation\n# and to allocate it in a better place), and at the same time, will release the\n# old copies of the data. This process, repeated incrementally for all the keys\n# will cause the fragmentation to drop back to normal values.\n#\n# Important things to understand:\n#\n# 1. This feature is disabled by default, and only works if you compiled Redis\n#    to use the copy of Jemalloc we ship with the source code of Redis.\n#    This is the default with Linux builds.\n#\n# 2. You never need to enable this feature if you don\'t have fragmentation\n#    issues.\n#\n# 3. Once you experience fragmentation, you can enable this feature when\n#    needed with the command "CONFIG SET activedefrag yes".\n#\n# The configuration parameters are able to fine tune the behavior of the\n# defragmentation process. If you are not sure about what they mean it is\n# a good idea to leave the defaults untouched.\n \n# Enabled active defragmentation\n# activedefrag yes\n \n# Minimum amount of fragmentation waste to start active defrag\n# active-defrag-ignore-bytes 100mb\n \n# Minimum percentage of fragmentation to start active defrag\n# active-defrag-threshold-lower 10\n \n# Maximum percentage of fragmentation at which we use maximum effort\n# active-defrag-threshold-upper 100\n \n# Minimal effort for defrag in CPU percentage\n# active-defrag-cycle-min 5\n \n# Maximal effort for defrag in CPU percentage\n# active-defrag-cycle-max 75\n \n# Maximum number of set/hash/zset/list fields that will be processed from\n# the main dictionary scan\n# active-defrag-max-scan-fields 1000\n \n')])])])]),e._v(" "),t("li",[t("p",[e._v("使用redis6.0.8镜像创建容器(也叫运行镜像)")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" run "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-p")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("6379")]),e._v(":6379 "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--name")]),e._v(" myredis6 "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--privileged")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("true "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-v")]),e._v(" /opt/docker/redis/redis.conf:/etc/redis/redis.conf "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-v")]),e._v(" /opt/docker/redis/data:/data "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-d")]),e._v(" redis:6.0.8 redis-server /etc/redis/redis.conf\n\n")])])])]),e._v(" "),t("li",[t("p",[e._v("测试redis-cli连接上来")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("exec")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-it")]),e._v(" myredis6 /bin/bash\nredis-cli\n")])])])]),e._v(" "),t("li",[t("p",[e._v("请证明docker启动使用了我们自己指定的配置文件")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("修改前")]),e._v(" "),t("p",[e._v("我们用的配置文件，数据库默认是16个")])]),e._v(" "),t("li",[t("p",[e._v("修改后")]),e._v(" "),t("p",[e._v("将数据库设置为10个")]),e._v(" "),t("div",{staticClass:"language-conf extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("databases 10\n")])])]),t("blockquote",[t("p",[e._v("记得重启服务")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" restart myredis6\n")])])])])])])]),e._v(" "),t("li",[t("p",[e._v("测试redis-cli连接上来第2次")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("select")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("15")]),e._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 测试结果出现错误：(error) ERR DB index is out of range，说明现在数据库已经更改为10个")]),e._v("\n\n")])])])])]),e._v(" "),t("h3",{attrs:{id:"_5、安装nginx"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5、安装nginx"}},[e._v("#")]),e._v(" 5、安装Nginx")]),e._v(" "),t("p",[e._v("见高级篇Portainer")]),e._v(" "),t("h1",{attrs:{id:"docker-与微服务实战-高级篇"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-与微服务实战-高级篇"}},[e._v("#")]),e._v(" Docker 与微服务实战 高级篇")])])}),[],!1,null,null,null);t.default=n.exports}}]);